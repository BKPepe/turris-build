From 68aa47f3546d935750239cdc38fb6ad1260745ab Mon Sep 17 00:00:00 2001
From: Stepan Henek <stepan.henek@nic.cz>
Date: Tue, 22 May 2018 16:42:19 +0200
Subject: [PATCH] odhcp6c: export DUID to /var/run/odhcp6c-duid.{ifname}

Signed-off-by: Stepan Henek <stepan.henek@nic.cz>
---
 .../ipv6/odhcp6c/patches/020-duid-path.patch  | 134 ++++++++++++++++++
 1 file changed, 134 insertions(+)
 create mode 100644 package/network/ipv6/odhcp6c/patches/020-duid-path.patch

diff --git a/package/network/ipv6/odhcp6c/patches/020-duid-path.patch b/package/network/ipv6/odhcp6c/patches/020-duid-path.patch
new file mode 100644
index 0000000..6d9635f
--- /dev/null
+++ b/package/network/ipv6/odhcp6c/patches/020-duid-path.patch
@@ -0,0 +1,134 @@
+Index: odhcp6c-2018-07-14-67ae6a71/src/dhcpv6.c
+===================================================================
+--- odhcp6c-2018-07-14-67ae6a71.orig/src/dhcpv6.c
++++ odhcp6c-2018-07-14-67ae6a71/src/dhcpv6.c
+@@ -25,6 +25,7 @@
+ #include <unistd.h>
+ #include <syslog.h>
+ #include <stdbool.h>
++#include <stdio.h>
+ #include <ctype.h>
+ #include <sys/time.h>
+ #include <sys/ioctl.h>
+@@ -123,7 +124,7 @@ static uint32_t ntohl_unaligned(const ui
+ 	return ntohl(buf);
+ }
+ 
+-int init_dhcpv6(const char *ifname, unsigned int options, int sol_timeout)
++int init_dhcpv6(const char *ifname, unsigned int options, int sol_timeout, const char *duid_path)
+ {
+ 	client_options = options;
+ 	dhcpv6_retx[DHCPV6_MSG_SOLICIT].max_timeo = sol_timeout;
+@@ -176,6 +177,29 @@ int init_dhcpv6(const char *ifname, unsi
+ 		odhcp6c_add_state(STATE_CLIENT_ID, duid, sizeof(duid));
+ 	}
+ 
++	// Write duid to path
++	if (duid_path) {
++		// read duid
++		size_t duid_len;
++		void *duid = odhcp6c_get_state(STATE_CLIENT_ID, &duid_len);
++		char duid_buf[duid_len * 2 + 1];
++		script_hexlify(duid_buf, &((uint8_t *) duid)[4], duid_len - 4);
++		duid_buf[duid_len * 2] = 0;
++
++		// generate path
++		char file_path[strlen(duid_path) + strlen(ifname) + 2];
++		sprintf(file_path, "%s.%s", duid_path, ifname);
++
++		// write to file
++		FILE *fp = fopen(file_path, "w");
++		if (fp) {
++			fprintf(fp, "%s\n", duid_buf);
++			fclose(fp);
++		} else {
++			syslog(LOG_ERR, "Failed to write DUID '%s' into file '%s'!", duid_buf, file_path);
++		};
++	}
++
+ 	// Create ORO
+ 	if (!(client_options & DHCPV6_STRICT_OPTIONS)) {
+ 		uint16_t oro[] = {
+Index: odhcp6c-2018-07-14-67ae6a71/src/odhcp6c.c
+===================================================================
+--- odhcp6c-2018-07-14-67ae6a71.orig/src/odhcp6c.c
++++ odhcp6c-2018-07-14-67ae6a71/src/odhcp6c.c
+@@ -121,6 +121,7 @@ int main(_unused int argc, char* const a
+ 	// Allocate resources
+ 	const char *pidfile = NULL;
+ 	const char *script = "/usr/sbin/odhcp6c-update";
++	const char *duid_path = "/var/run/odhcp6c-duid";
+ 	ssize_t l;
+ 	uint8_t buf[134], *o_data;
+ 	char *optpos;
+@@ -138,7 +139,7 @@ int main(_unused int argc, char* const a
+ 	unsigned int ra_options = RA_RDNSS_DEFAULT_LIFETIME;
+ 	unsigned int ra_holdoff_interval = RA_MIN_ADV_INTERVAL;
+ 
+-	while ((c = getopt(argc, argv, "S::N:V:P:FB:c:i:r:Ru:Ux:s:kt:m:Lhedp:fav")) != -1) {
++	while ((c = getopt(argc, argv, "S::N:V:P:FB:c:C:i:r:Ru:Ux:s:kt:m:Lhedp:fav")) != -1) {
+ 		switch (c) {
+ 		case 'S':
+ 			allow_slaac_only = (optarg) ? atoi(optarg) : -1;
+@@ -231,6 +232,10 @@ int main(_unused int argc, char* const a
+ 				help = true;
+ 			break;
+ 
++		case 'C':
++			duid_path = optarg;
++			break;
++
+ 		case 'i':
+ 			if (inet_pton(AF_INET6, optarg, &ifid) != 1)
+ 				help = true;
+@@ -364,7 +369,7 @@ int main(_unused int argc, char* const a
+ 	signal(SIGUSR2, sighandler);
+ 
+ 	if ((urandom_fd = open("/dev/urandom", O_CLOEXEC | O_RDONLY)) < 0 ||
+-			init_dhcpv6(ifname, client_options, sol_timeout) ||
++			init_dhcpv6(ifname, client_options, sol_timeout, duid_path) ||
+ 			ra_init(ifname, &ifid, ra_options, ra_holdoff_interval) ||
+ 			script_init(script, ifname)) {
+ 		syslog(LOG_ERR, "failed to initialize: %s", strerror(errno));
+@@ -566,6 +571,7 @@ static int usage(void)
+ 	"			-x 0x1f4:ABBA - option 500\n"
+ 	"			-x 202:'\"file\"' - option 202\n"
+ 	"	-c <clientid>	Override client-ID (base-16 encoded 16-bit type + value)\n"
++	"	-C <path>	Export used client-ID to specified path\n"
+ 	"	-i <iface-id>	Use a custom interface identifier for RA handling\n"
+ 	"	-r <options>	Options to be requested (comma-separated)\n"
+ 	"	-R		Do not request any options except those specified with -r\n"
+Index: odhcp6c-2018-07-14-67ae6a71/src/odhcp6c.h
+===================================================================
+--- odhcp6c-2018-07-14-67ae6a71.orig/src/odhcp6c.h
++++ odhcp6c-2018-07-14-67ae6a71/src/odhcp6c.h
+@@ -341,7 +341,7 @@ struct odhcp6c_opt {
+ 	const char *str;
+ };
+ 
+-int init_dhcpv6(const char *ifname, unsigned int client_options, int sol_timeout);
++int init_dhcpv6(const char *ifname, unsigned int client_options, int sol_timeout, const char *duid_path);
+ int dhcpv6_set_ia_mode(enum odhcp6c_ia_mode na, enum odhcp6c_ia_mode pd);
+ int dhcpv6_request(enum dhcpv6_msg type);
+ int dhcpv6_poll_reconfigure(void);
+@@ -358,6 +358,7 @@ int ra_get_retransmit(void);
+ 
+ int script_init(const char *path, const char *ifname);
+ ssize_t script_unhexlify(uint8_t *dst, size_t len, const char *src);
++void script_hexlify(char *dst, const uint8_t *src, size_t len);
+ void script_call(const char *status, int delay, bool resume);
+ 
+ bool odhcp6c_signal_process(void);
+Index: odhcp6c-2018-07-14-67ae6a71/src/script.c
+===================================================================
+--- odhcp6c-2018-07-14-67ae6a71.orig/src/script.c
++++ odhcp6c-2018-07-14-67ae6a71/src/script.c
+@@ -84,7 +84,7 @@ ssize_t script_unhexlify(uint8_t *dst, s
+ 	return c;
+ }
+ 
+-static void script_hexlify(char *dst, const uint8_t *src, size_t len)
++void script_hexlify(char *dst, const uint8_t *src, size_t len)
+ {
+ 	for (size_t i = 0; i < len; ++i) {
+ 		*dst++ = hexdigits[src[i] >> 4];
-- 
2.18.0

