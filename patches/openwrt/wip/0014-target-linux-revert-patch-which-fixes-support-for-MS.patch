From 83db6e965bb2f52291b06b4b1e06bcdac698bb50 Mon Sep 17 00:00:00 2001
From: Josef Schlehofer <pepe.schlehofer@gmail.com>
Date: Tue, 3 May 2022 12:02:31 +0200
Subject: [PATCH] target/linux: revert patch which fixes support for MSI
 interrupts

Quick fix for https://gitlab.nic.cz/turris/os/build/-/issues/344
---
 ...dvark-Fix-support-for-MSI-interrupts.patch | 55 +++++++++++++++++++
 1 file changed, 55 insertions(+)
 create mode 100644 target/linux/mvebu/patches-4.14/530-Revert-PCI-aardvark-Fix-support-for-MSI-interrupts.patch

diff --git a/target/linux/mvebu/patches-4.14/530-Revert-PCI-aardvark-Fix-support-for-MSI-interrupts.patch b/target/linux/mvebu/patches-4.14/530-Revert-PCI-aardvark-Fix-support-for-MSI-interrupts.patch
new file mode 100644
index 0000000000..03310d3f04
--- /dev/null
+++ b/target/linux/mvebu/patches-4.14/530-Revert-PCI-aardvark-Fix-support-for-MSI-interrupts.patch
@@ -0,0 +1,55 @@
+From d2f6b11cd604a6d288b8570e2a3b0dc533d84b02 Mon Sep 17 00:00:00 2001
+From: Josef Schlehofer <pepe.schlehofer@gmail.com>
+Date: Tue, 3 May 2022 11:58:30 +0200
+Subject: [PATCH] Revert "PCI: aardvark: Fix support for MSI interrupts"
+
+This reverts commit d7f87c7849d498c186cbde1e6e8de3e729bf2f19.
+---
+ drivers/pci/host/pci-aardvark.c | 16 ++++++++++------
+ 1 file changed, 10 insertions(+), 6 deletions(-)
+
+diff --git a/drivers/pci/host/pci-aardvark.c b/drivers/pci/host/pci-aardvark.c
+index 124fd7cb5da5..9ae544e113dc 100644
+--- a/drivers/pci/host/pci-aardvark.c
++++ b/drivers/pci/host/pci-aardvark.c
+@@ -834,7 +834,7 @@ static void advk_msi_irq_compose_msi_msg(struct irq_data *data,
+ 
+ 	msg->address_lo = lower_32_bits(msi_msg);
+ 	msg->address_hi = upper_32_bits(msi_msg);
+-	msg->data = data->hwirq;
++	msg->data = data->irq;
+ }
+ 
+ static int advk_msi_set_affinity(struct irq_data *irq_data,
+@@ -851,11 +851,15 @@ static int advk_msi_irq_domain_alloc(struct irq_domain *domain,
+ 	int hwirq, i;
+ 
+ 	mutex_lock(&pcie->msi_used_lock);
+-	hwirq = bitmap_find_free_region(pcie->msi_used, MSI_IRQ_NUM,
+-					order_base_2(nr_irqs));
+-	mutex_unlock(&pcie->msi_used_lock);
+-	if (hwirq < 0)
++	hwirq = bitmap_find_next_zero_area(pcie->msi_used, MSI_IRQ_NUM,
++					   0, nr_irqs, 0);
++	if (hwirq >= MSI_IRQ_NUM) {
++		mutex_unlock(&pcie->msi_used_lock);
+ 		return -ENOSPC;
++	}
++
++	bitmap_set(pcie->msi_used, hwirq, nr_irqs);
++	mutex_unlock(&pcie->msi_used_lock);
+ 
+ 	for (i = 0; i < nr_irqs; i++)
+ 		irq_domain_set_info(domain, virq + i, hwirq + i,
+@@ -873,7 +877,7 @@ static void advk_msi_irq_domain_free(struct irq_domain *domain,
+ 	struct advk_pcie *pcie = domain->host_data;
+ 
+ 	mutex_lock(&pcie->msi_used_lock);
+-	bitmap_release_region(pcie->msi_used, d->hwirq, order_base_2(nr_irqs));
++	bitmap_clear(pcie->msi_used, d->hwirq, nr_irqs);
+ 	mutex_unlock(&pcie->msi_used_lock);
+ }
+ 
+-- 
+2.34.1
+
-- 
2.34.1

