From b34c11ad7d871f7ab63274bce8e5b913365f6290 Mon Sep 17 00:00:00 2001
From: Michal Hrusecky <Michal@Hrusecky.net>
Date: Wed, 27 Dec 2017 17:19:45 +0100
Subject: [PATCH] kernel: Add Turris 1.X support

Tested on Turris 1.1 and works, but might break other mpc boards, so might need
some polishing.

Signed-off-by: Michal Hrusecky <Michal@Hrusecky.net>
---
 target/linux/mpc85xx/Makefile                 |   4 +-
 .../mpc85xx/base-files/etc/board.d/02_network |   6 +
 target/linux/mpc85xx/config-4.14              | 375 ++++++++++++++++++
 .../arch/powerpc/boot/dts/turris.dts          | 296 ++++++++++++++
 target/linux/mpc85xx/p2020/config-default     | 101 +++++
 target/linux/mpc85xx/p2020/profiles/turris.mk |  29 ++
 target/linux/mpc85xx/p2020/target.mk          |   6 +
 ...fsl_elbc_nand_add_ecc_mode_selection.patch | 227 +++++++++++
 ...a8k-extend-slave-bus-implementations.patch | 243 ++++++++++++
 9 files changed, 1285 insertions(+), 2 deletions(-)
 create mode 100644 target/linux/mpc85xx/config-4.14
 create mode 100644 target/linux/mpc85xx/files-4.14/arch/powerpc/boot/dts/turris.dts
 create mode 100644 target/linux/mpc85xx/p2020/config-default
 create mode 100644 target/linux/mpc85xx/p2020/profiles/turris.mk
 create mode 100644 target/linux/mpc85xx/p2020/target.mk
 create mode 100644 target/linux/mpc85xx/patches-4.14/230-fsl_elbc_nand_add_ecc_mode_selection.patch
 create mode 100644 target/linux/mpc85xx/patches-4.14/400-net-dsa-qca8k-extend-slave-bus-implementations.patch

diff --git a/target/linux/mpc85xx/Makefile b/target/linux/mpc85xx/Makefile
index b181e67..924572b 100644
--- a/target/linux/mpc85xx/Makefile
+++ b/target/linux/mpc85xx/Makefile
@@ -12,9 +12,9 @@ BOARDNAME:=Freescale MPC85xx
 CPU_TYPE:=8540
 FEATURES:=squashfs
 MAINTAINER:=Imre Kaloz <kaloz@openwrt.org>
-SUBTARGETS:=generic p1020
+SUBTARGETS:=generic p1020 p2020
 
-KERNEL_PATCHVER:=4.9
+KERNEL_PATCHVER:=4.14
 
 KERNELNAME:=zImage
 
diff --git a/target/linux/mpc85xx/base-files/etc/board.d/02_network b/target/linux/mpc85xx/base-files/etc/board.d/02_network
index 19f01a6..7679728 100755
--- a/target/linux/mpc85xx/base-files/etc/board.d/02_network
+++ b/target/linux/mpc85xx/base-files/etc/board.d/02_network
@@ -18,6 +18,12 @@ tplink,tl-wdr4900-v1)
 		"0@eth0" "2:lan:1" "3:lan:2" "4:lan:3" "5:lan:4" "1:wan"
 	ucidef_set_interface_macaddr "wan" "$(mtd_get_mac_binary config 332)"
 	;;
+fsl,P2020RDB)
+	ucidef_set_interface_lan "eth0 eth1"
+	ucidef_set_interface_wan "eth2"
+	ucidef_add_switch "switch0" \
+		"0u@eth1" "1:lan1" "2:lan1" "3:lan1" "4:lan1" "5:lan2" "6u@eth0"
+	;;
 *)
 	ucidef_set_interfaces_lan_wan "eth0" "eth1"
 	;;
diff --git a/target/linux/mpc85xx/config-4.14 b/target/linux/mpc85xx/config-4.14
new file mode 100644
index 0000000..79480d7
--- /dev/null
+++ b/target/linux/mpc85xx/config-4.14
@@ -0,0 +1,375 @@
+# CONFIG_40x is not set
+# CONFIG_44x is not set
+# CONFIG_ADVANCED_OPTIONS is not set
+CONFIG_AR8216_PHY=y
+CONFIG_AR8216_PHY_LEDS=y
+CONFIG_ARCH_ENABLE_MEMORY_HOTPLUG=y
+CONFIG_ARCH_ENABLE_MEMORY_HOTREMOVE=y
+CONFIG_ARCH_HAS_DMA_SET_COHERENT_MASK=y
+CONFIG_ARCH_HAS_ELF_RANDOMIZE=y
+CONFIG_ARCH_HAS_FORTIFY_SOURCE=y
+CONFIG_ARCH_HAS_GCOV_PROFILE_ALL=y
+CONFIG_ARCH_HAS_SG_CHAIN=y
+CONFIG_ARCH_HAS_STRICT_KERNEL_RWX=y
+# CONFIG_ARCH_HAS_STRICT_MODULE_RWX is not set
+CONFIG_ARCH_HAS_WALK_MEMORY=y
+CONFIG_ARCH_HAVE_NMI_SAFE_CMPXCHG=y
+CONFIG_ARCH_HIBERNATION_POSSIBLE=y
+CONFIG_ARCH_MAY_HAVE_PC_FDC=y
+CONFIG_ARCH_MIGHT_HAVE_PC_PARPORT=y
+CONFIG_ARCH_MIGHT_HAVE_PC_SERIO=y
+CONFIG_ARCH_MMAP_RND_BITS=11
+CONFIG_ARCH_MMAP_RND_BITS_MAX=17
+CONFIG_ARCH_MMAP_RND_BITS_MIN=11
+CONFIG_ARCH_MMAP_RND_COMPAT_BITS_MAX=17
+CONFIG_ARCH_MMAP_RND_COMPAT_BITS_MIN=11
+CONFIG_ARCH_OPTIONAL_KERNEL_RWX=y
+# CONFIG_ARCH_OPTIONAL_KERNEL_RWX_DEFAULT is not set
+# CONFIG_ARCH_RANDOM is not set
+CONFIG_ARCH_SUPPORTS_ATOMIC_RMW=y
+CONFIG_ARCH_SUPPORTS_DEBUG_PAGEALLOC=y
+CONFIG_ARCH_SUPPORTS_DEFERRED_STRUCT_PAGE_INIT=y
+CONFIG_ARCH_SUPPORTS_UPROBES=y
+CONFIG_ARCH_SUSPEND_POSSIBLE=y
+CONFIG_ARCH_USE_BUILTIN_BSWAP=y
+CONFIG_ARCH_WANT_IPC_PARSE_VERSION=y
+CONFIG_ARCH_WEAK_RELEASE_ACQUIRE=y
+CONFIG_ASN1=y
+CONFIG_AUDIT_ARCH=y
+CONFIG_BLK_MQ_PCI=y
+CONFIG_BOOKE=y
+CONFIG_BOOKE_WDT=y
+CONFIG_BOUNCE=y
+# CONFIG_BSC9131_RDB is not set
+# CONFIG_BSC9132_QDS is not set
+# CONFIG_C293_PCIE is not set
+CONFIG_CLONE_BACKWARDS=y
+CONFIG_CLZ_TAB=y
+CONFIG_CMDLINE="console=ttyS0,115200"
+CONFIG_CMDLINE_BOOL=y
+# CONFIG_CMDLINE_OVERRIDE is not set
+# CONFIG_CORENET_GENERIC is not set
+# CONFIG_CPM2 is not set
+CONFIG_CPU_BIG_ENDIAN=y
+CONFIG_CRYPTO_AEAD=y
+CONFIG_CRYPTO_AEAD2=y
+# CONFIG_CRYPTO_AES_PPC_SPE is not set
+CONFIG_CRYPTO_AKCIPHER=y
+CONFIG_CRYPTO_AKCIPHER2=y
+CONFIG_CRYPTO_AUTHENC=y
+CONFIG_CRYPTO_HASH=y
+CONFIG_CRYPTO_HASH2=y
+CONFIG_CRYPTO_HW=y
+CONFIG_CRYPTO_MANAGER=y
+CONFIG_CRYPTO_MANAGER2=y
+# CONFIG_CRYPTO_MD5_PPC is not set
+CONFIG_CRYPTO_NULL=y
+CONFIG_CRYPTO_NULL2=y
+CONFIG_CRYPTO_RNG=y
+CONFIG_CRYPTO_RNG2=y
+CONFIG_CRYPTO_RSA=y
+# CONFIG_CRYPTO_SHA1_PPC is not set
+# CONFIG_CRYPTO_SHA1_PPC_SPE is not set
+# CONFIG_CRYPTO_SHA256_PPC_SPE is not set
+CONFIG_CRYPTO_WORKQUEUE=y
+CONFIG_DEBUG_BUGVERBOSE=y
+# CONFIG_DEFAULT_UIMAGE is not set
+CONFIG_DNOTIFY=y
+CONFIG_DTC=y
+# CONFIG_E200 is not set
+CONFIG_E500=y
+CONFIG_EARLY_PRINTK=y
+CONFIG_EDAC_ATOMIC_SCRUB=y
+CONFIG_EDAC_SUPPORT=y
+CONFIG_ENABLE_MUST_CHECK=y
+# CONFIG_EPAPR_BOOT is not set
+CONFIG_ETHERNET_PACKET_MANGLE=y
+# CONFIG_FHCI_DEBUG is not set
+CONFIG_FIXED_PHY=y
+# CONFIG_FORCE_SMP is not set
+CONFIG_FSL_BOOKE=y
+# CONFIG_FSL_DPAA is not set
+CONFIG_FSL_EMB_PERFMON=y
+# CONFIG_FSL_FMAN is not set
+CONFIG_FSL_GTM=y
+CONFIG_FSL_LBC=y
+CONFIG_FSL_PCI=y
+CONFIG_FSL_PQ_MDIO=y
+CONFIG_FSL_SOC=y
+CONFIG_FSL_SOC_BOOKE=y
+# CONFIG_FSL_ULI1575 is not set
+CONFIG_GENERIC_ALLOCATOR=y
+CONFIG_GENERIC_ATOMIC64=y
+CONFIG_GENERIC_BUG=y
+CONFIG_GENERIC_CLOCKEVENTS=y
+CONFIG_GENERIC_CMOS_UPDATE=y
+CONFIG_GENERIC_CPU_AUTOPROBE=y
+# CONFIG_GENERIC_CSUM is not set
+CONFIG_GENERIC_IO=y
+CONFIG_GENERIC_IRQ_SHOW=y
+CONFIG_GENERIC_IRQ_SHOW_LEVEL=y
+CONFIG_GENERIC_ISA_DMA=y
+CONFIG_GENERIC_NVRAM=y
+CONFIG_GENERIC_PCI_IOMAP=y
+CONFIG_GENERIC_SMP_IDLE_THREAD=y
+CONFIG_GENERIC_STRNCPY_FROM_USER=y
+CONFIG_GENERIC_STRNLEN_USER=y
+# CONFIG_GENERIC_TBSYNC is not set
+CONFIG_GENERIC_TIME_VSYSCALL=y
+CONFIG_GEN_RTC=y
+# CONFIG_GE_FPGA is not set
+# CONFIG_GE_IMP3A is not set
+CONFIG_GIANFAR=y
+CONFIG_GPIOLIB=y
+CONFIG_GPIO_GENERIC=y
+CONFIG_GPIO_MPC8XXX=y
+CONFIG_GPIO_SYSFS=y
+# CONFIG_GRO_CELLS is not set
+CONFIG_HAS_DMA=y
+CONFIG_HAS_IOMEM=y
+CONFIG_HAS_IOPORT_MAP=y
+# CONFIG_HAS_RAPIDIO is not set
+# CONFIG_HAVE_64BIT_ALIGNED_ACCESS is not set
+CONFIG_HAVE_ARCH_AUDITSYSCALL=y
+# CONFIG_HAVE_ARCH_BITREVERSE is not set
+CONFIG_HAVE_ARCH_JUMP_LABEL=y
+CONFIG_HAVE_ARCH_KGDB=y
+CONFIG_HAVE_ARCH_SECCOMP_FILTER=y
+CONFIG_HAVE_ARCH_TRACEHOOK=y
+# CONFIG_HAVE_BOOTMEM_INFO_NODE is not set
+CONFIG_HAVE_CBPF_JIT=y
+CONFIG_HAVE_DEBUG_KMEMLEAK=y
+CONFIG_HAVE_DEBUG_STACKOVERFLOW=y
+CONFIG_HAVE_DMA_API_DEBUG=y
+CONFIG_HAVE_DYNAMIC_FTRACE=y
+CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS=y
+CONFIG_HAVE_FTRACE_MCOUNT_RECORD=y
+CONFIG_HAVE_FUNCTION_GRAPH_TRACER=y
+CONFIG_HAVE_FUNCTION_TRACER=y
+# CONFIG_HAVE_GENERIC_DMA_COHERENT is not set
+CONFIG_HAVE_GENERIC_GUP=y
+CONFIG_HAVE_IDE=y
+CONFIG_HAVE_IOREMAP_PROT=y
+CONFIG_HAVE_IRQ_EXIT_ON_IRQ_STACK=y
+CONFIG_HAVE_IRQ_TIME_ACCOUNTING=y
+CONFIG_HAVE_KPROBES_ON_FTRACE=y
+CONFIG_HAVE_MEMBLOCK=y
+CONFIG_HAVE_MEMBLOCK_NODE_MAP=y
+CONFIG_HAVE_MOD_ARCH_SPECIFIC=y
+CONFIG_HAVE_NET_DSA=y
+CONFIG_HAVE_OPROFILE=y
+CONFIG_HAVE_PERF_EVENTS=y
+CONFIG_HAVE_PERF_REGS=y
+CONFIG_HAVE_PERF_USER_STACK_DUMP=y
+CONFIG_HAVE_REGS_AND_STACK_ACCESS_API=y
+# CONFIG_HAVE_SETUP_PER_CPU_AREA is not set
+CONFIG_HAVE_SYSCALL_TRACEPOINTS=y
+CONFIG_HAVE_VIRT_CPU_ACCOUNTING=y
+# CONFIG_HIVEAP_330 is not set
+CONFIG_HW_RANDOM=y
+CONFIG_HZ=250
+# CONFIG_HZ_100 is not set
+CONFIG_HZ_250=y
+CONFIG_HZ_PERIODIC=y
+CONFIG_I2C=y
+CONFIG_I2C_BOARDINFO=y
+CONFIG_I2C_MPC=y
+CONFIG_ILLEGAL_POINTER_VALUE=0
+CONFIG_INITRAMFS_SOURCE=""
+CONFIG_IOMMU_HELPER=y
+# CONFIG_IPIC is not set
+CONFIG_IRQCHIP=y
+CONFIG_IRQ_DOMAIN=y
+CONFIG_IRQ_FORCED_THREADING=y
+CONFIG_IRQ_WORK=y
+CONFIG_ISA_DMA_API=y
+CONFIG_KERNEL_GZIP=y
+CONFIG_KERNEL_START=0xc0000000
+# CONFIG_KSI8560 is not set
+CONFIG_LEGACY_PTYS=y
+CONFIG_LEGACY_PTY_COUNT=256
+CONFIG_LIBFDT=y
+CONFIG_LOWMEM_CAM_NUM=3
+CONFIG_LOWMEM_SIZE=0x30000000
+CONFIG_LXT_PHY=y
+# CONFIG_MATH_EMULATION is not set
+CONFIG_MDIO_BUS=y
+CONFIG_MDIO_DEVICE=y
+CONFIG_MIGRATION=y
+# CONFIG_MMIO_NVRAM is not set
+CONFIG_MODULES_USE_ELF_RELA=y
+# CONFIG_MPC8536_DS is not set
+# CONFIG_MPC8540_ADS is not set
+# CONFIG_MPC8560_ADS is not set
+# CONFIG_MPC85xx_CDS is not set
+# CONFIG_MPC85xx_DS is not set
+# CONFIG_MPC85xx_MDS is not set
+# CONFIG_MPC85xx_RDB is not set
+CONFIG_MPIC=y
+# CONFIG_MPIC_MSGR is not set
+CONFIG_MPIC_TIMER=y
+# CONFIG_MPIC_U3_HT_IRQS is not set
+# CONFIG_MPIC_WEIRD is not set
+CONFIG_MPILIB=y
+# CONFIG_MTD_CFI is not set
+CONFIG_MTD_M25P80=y
+CONFIG_MTD_SPI_NOR=y
+# CONFIG_MVME2500 is not set
+# CONFIG_NEED_DMA_MAP_STATE is not set
+# CONFIG_NEED_PER_CPU_EMBED_FIRST_CHUNK is not set
+CONFIG_NEED_PER_CPU_KM=y
+CONFIG_NEED_SG_DMA_LENGTH=y
+CONFIG_NLS=y
+# CONFIG_NONSTATIC_KERNEL is not set
+CONFIG_NO_BOOTMEM=y
+CONFIG_NR_IRQS=512
+CONFIG_OF=y
+CONFIG_OF_ADDRESS=y
+CONFIG_OF_ADDRESS_PCI=y
+CONFIG_OF_EARLY_FLATTREE=y
+CONFIG_OF_FLATTREE=y
+CONFIG_OF_GPIO=y
+CONFIG_OF_IRQ=y
+CONFIG_OF_MDIO=y
+CONFIG_OF_NET=y
+CONFIG_OF_PCI=y
+CONFIG_OF_PCI_IRQ=y
+CONFIG_OF_RESERVED_MEM=y
+CONFIG_OLD_SIGACTION=y
+CONFIG_OLD_SIGSUSPEND=y
+# CONFIG_P1010_RDB is not set
+# CONFIG_P1022_DS is not set
+# CONFIG_P1022_RDK is not set
+# CONFIG_P1023_RDB is not set
+CONFIG_PAGE_OFFSET=0xc0000000
+# CONFIG_PANDA is not set
+CONFIG_PCI=y
+CONFIG_PCIEAER=y
+CONFIG_PCIEASPM=y
+# CONFIG_PCIEASPM_DEBUG is not set
+CONFIG_PCIEASPM_DEFAULT=y
+# CONFIG_PCIEASPM_PERFORMANCE is not set
+# CONFIG_PCIEASPM_POWERSAVE is not set
+# CONFIG_PCIEASPM_POWER_SUPERSAVE is not set
+CONFIG_PCIEPORTBUS=y
+CONFIG_PCI_DOMAINS=y
+CONFIG_PGTABLE_LEVELS=2
+CONFIG_PHYLIB=y
+CONFIG_PHYSICAL_ALIGN=0x04000000
+CONFIG_PHYSICAL_START=0x00000000
+# CONFIG_PHYS_64BIT is not set
+# CONFIG_PPA8548 is not set
+CONFIG_PPC=y
+CONFIG_PPC32=y
+# CONFIG_PPC64 is not set
+CONFIG_PPC_85xx=y
+# CONFIG_PPC_8xx is not set
+# CONFIG_PPC_970_NAP is not set
+CONFIG_PPC_ADV_DEBUG_DACS=2
+CONFIG_PPC_ADV_DEBUG_DVCS=0
+CONFIG_PPC_ADV_DEBUG_IACS=2
+CONFIG_PPC_ADV_DEBUG_REGS=y
+CONFIG_PPC_BOOK3E_MMU=y
+# CONFIG_PPC_BOOK3S_32 is not set
+# CONFIG_PPC_CELL is not set
+# CONFIG_PPC_CELL_NATIVE is not set
+# CONFIG_PPC_COPRO_BASE is not set
+# CONFIG_PPC_DCR_MMIO is not set
+# CONFIG_PPC_DCR_NATIVE is not set
+CONFIG_PPC_DOORBELL=y
+# CONFIG_PPC_E500MC is not set
+# CONFIG_PPC_EARLY_DEBUG is not set
+# CONFIG_PPC_EPAPR_HV_PIC is not set
+CONFIG_PPC_FSL_BOOK3E=y
+# CONFIG_PPC_I8259 is not set
+# CONFIG_PPC_ICP_HV is not set
+# CONFIG_PPC_ICP_NATIVE is not set
+# CONFIG_PPC_ICS_RTAS is not set
+CONFIG_PPC_INDIRECT_PCI=y
+CONFIG_PPC_MMU_NOHASH=y
+# CONFIG_PPC_MM_SLICES is not set
+# CONFIG_PPC_MPC106 is not set
+# CONFIG_PPC_P7_NAP is not set
+CONFIG_PPC_PCI_CHOICE=y
+# CONFIG_PPC_PTDUMP is not set
+# CONFIG_PPC_QEMU_E500 is not set
+# CONFIG_PPC_RTAS is not set
+CONFIG_PPC_SMP_MUXED_IPI=y
+CONFIG_PPC_UDBG_16550=y
+CONFIG_PPC_WERROR=y
+# CONFIG_PPC_XICS is not set
+# CONFIG_PPC_XIVE is not set
+# CONFIG_PPC_XIVE_SPAPR is not set
+# CONFIG_PQ2ADS is not set
+CONFIG_QE_GPIO=y
+CONFIG_QE_USB=y
+CONFIG_QUICC_ENGINE=y
+CONFIG_RAS=y
+# CONFIG_RCU_NEED_SEGCBLIST is not set
+# CONFIG_RCU_STALL_COMMON is not set
+# CONFIG_RED_15W_REV1 is not set
+CONFIG_REGMAP=y
+CONFIG_REGMAP_I2C=y
+CONFIG_REGMAP_SPI=y
+CONFIG_RTC_CLASS=y
+CONFIG_RTC_DRV_GENERIC=y
+CONFIG_RTC_I2C_AND_SPI=y
+CONFIG_RTC_MC146818_LIB=y
+CONFIG_RWSEM_XCHGADD_ALGORITHM=y
+# CONFIG_SBC8548 is not set
+# CONFIG_SCHED_INFO is not set
+# CONFIG_SCSI_DMA is not set
+CONFIG_SERIAL_8250_EXTENDED=y
+CONFIG_SERIAL_8250_FSL=y
+CONFIG_SERIAL_8250_SHARE_IRQ=y
+CONFIG_SERIAL_OF_PLATFORM=y
+# CONFIG_SERIAL_QE is not set
+CONFIG_SIMPLE_GPIO=y
+# CONFIG_SOCRATES is not set
+CONFIG_SPARSE_IRQ=y
+CONFIG_SPE=y
+CONFIG_SPE_POSSIBLE=y
+CONFIG_SPI=y
+CONFIG_SPI_FSL_ESPI=y
+CONFIG_SPI_MASTER=y
+CONFIG_SRCU=y
+# CONFIG_STRIP_ASM_SYMS is not set
+# CONFIG_STX_GP3 is not set
+CONFIG_SWCONFIG=y
+CONFIG_SWIOTLB=y
+CONFIG_SWPHY=y
+CONFIG_SYSCTL_EXCEPTION_TRACE=y
+CONFIG_TASK_SIZE=0xc0000000
+CONFIG_THREAD_SHIFT=13
+CONFIG_TICK_CPU_ACCOUNTING=y
+CONFIG_TINY_SRCU=y
+# CONFIG_TL_WDR4900_V1 is not set
+# CONFIG_TQM8540 is not set
+# CONFIG_TQM8541 is not set
+# CONFIG_TQM8548 is not set
+# CONFIG_TQM8555 is not set
+# CONFIG_TQM8560 is not set
+# CONFIG_TWR_P102x is not set
+CONFIG_UCC=y
+CONFIG_UCC_FAST=y
+CONFIG_UCC_GETH=y
+# CONFIG_UGETH_TX_ON_DEMAND is not set
+CONFIG_USB=y
+CONFIG_USB_COMMON=y
+CONFIG_USB_EHCI_FSL=y
+CONFIG_USB_EHCI_HCD=y
+# CONFIG_USB_EHCI_HCD_PLATFORM is not set
+CONFIG_USB_EHCI_HCD_PPC_OF=y
+CONFIG_USB_FHCI_HCD=y
+CONFIG_USB_SUPPORT=y
+CONFIG_VDSO32=y
+# CONFIG_VIRT_CPU_ACCOUNTING_NATIVE is not set
+CONFIG_VM_EVENT_COUNTERS=y
+CONFIG_WATCHDOG_CORE=y
+# CONFIG_XES_MPC85xx is not set
+# CONFIG_XPS_USB_HCD_XILINX is not set
+CONFIG_XZ_DEC_BCJ=y
+CONFIG_XZ_DEC_POWERPC=y
+CONFIG_FB_FSL_DIU=n
+CONFIG_VGA_CONSOLE=y
+CONFIG_VGACON_SOFT_SCROLLBACK=n
diff --git a/target/linux/mpc85xx/files-4.14/arch/powerpc/boot/dts/turris.dts b/target/linux/mpc85xx/files-4.14/arch/powerpc/boot/dts/turris.dts
new file mode 100644
index 0000000..b5128a3
--- /dev/null
+++ b/target/linux/mpc85xx/files-4.14/arch/powerpc/boot/dts/turris.dts
@@ -0,0 +1,296 @@
+/*
+ * Turris RDB Device Tree Source
+ *
+ * Copyright 2013 CZ.NIC z.s.p.o. (http://www.nic.cz/)
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+/include/ "fsl/p2020si-pre.dtsi"
+
+/ {
+	model = "Turris";
+	compatible = "fsl,P2020RDB";
+
+	aliases {
+		ethernet0 = &enet0;
+		ethernet1 = &enet1;
+		ethernet2 = &enet2;
+		serial0 = &serial0;
+		serial1 = &serial1;
+		pci0 = &pci0;
+		pci1 = &pci1;
+		pci2 = &pci2;
+		spi0 = &spi0;
+	};
+
+	memory {
+		device_type = "memory";
+	};
+
+	lbc: localbus@ffe05000 {
+		reg = <0 0xffe05000 0 0x1000>;
+
+		/* NOR and NAND Flashes */
+		ranges = <0x0 0x0 0x0 0xef000000 0x01000000
+			  0x1 0x0 0x0 0xff800000 0x00040000
+			  0x2 0x0 0x0 0xffb00000 0x00020000>;
+
+		nor@0,0 {
+			#address-cells = <1>;
+			#size-cells = <1>;
+			compatible = "cfi-flash";
+			reg = <0x0 0x0 0x1000000>;
+			bank-width = <2>;
+			device-width = <1>;
+
+			partitions {
+				compatible = "fixed-partitions";
+				#address-cells = <1>;
+				#size-cells = <1>;
+
+				partition@0 {
+					/* 128KB for DTB Image */
+					reg = <0x0 0x00020000>;
+					label = "NOR (RO) DTB Image";
+				};
+
+				partition@20000 {
+					/* 1.7 MB for Linux Kernel Image */
+					reg = <0x00020000 0x1A0000>;
+					label = "NOR (RO) Linux Kernel Image";
+				};
+
+				partition@1C0000 {
+					/* 1.5 MB for JFFS2 based Root file System */
+					reg = <0x001C0000 0x180000>;
+					label = "NOR (RO) JFFS2 Root File System";
+				};
+
+				partition@340000 {
+					/* for nand fw backup */
+					reg = <0x00340000 0xb00000>;
+					label = "NOR (RO) NAND FW backup";
+				};
+
+				partition@E40000 {
+					/* 128KB for Certificates backup */
+					reg = <0xE40000 0x000C0000>;
+					label = "NOR (RW) Cert backup";
+				};
+
+				partition@f00000 {
+					/* This location must not be altered  */
+					/* 512KB for u-boot Bootloader Image */
+					/* 512KB for u-boot Environment Variables */
+					reg = <0x00f00000 0x00100000>;
+					label = "NOR (RO) U-Boot Image";
+				};
+			};
+		};
+
+		nand@1,0 {
+			#address-cells = <1>;
+			#size-cells = <1>;
+			compatible = "fsl,p2020-fcm-nand",
+				     "fsl,elbc-fcm-nand";
+			reg = <0x1 0x0 0x00040000>;
+			nand-ecc-mode = "soft";
+			nand-ecc-algo = "bch";
+
+			partitions {
+				compatible = "fixed-partitions";
+				#address-cells = <1>;
+				#size-cells = <1>;
+
+				partition@0 {
+					/* 2MB for DTB Image */
+					reg = <0x00000000 0x00200000>;
+					label = "NAND (RW) DTB Image";
+				};
+
+				partition@200000 {
+					/* 5MB for Linux Kernel Image */
+					reg = <0x00200000 0x00500000>;
+					label = "NAND (RW) Linux Kernel Image";
+				};
+
+				partition@700000 {
+					/* 249MB for JFFS2 based Root file System */
+					reg = <0x00700000 0xF900000>;
+					label = "NAND (RW) JFFS2 Root File System";
+				};
+
+				partition@00 {
+					reg = <0x00000000 0x10000000>;
+					label = "rootfs-ubifs";
+				};
+			};
+		};
+	};
+
+	soc: soc@ffe00000 {
+		ranges = <0x0 0x0 0xffe00000 0x100000>;
+
+		i2c@3000 {
+			rtc@6f {
+				compatible = "mcp7940x";
+				reg = <0x6f>;
+			};
+			lm90@4c {
+				compatible = "sa56004";
+				reg = <0x4c>;
+			};
+		};
+
+		usb@22000 {
+			phy_type = "ulpi";
+			dr_mode = "host";
+		};
+
+		mdio@24520 {
+			switch0@10 {
+				compatible = "qca,qca8337";
+				#size-cells = <0>;
+				#address-cells = <1>;
+				interrupts = <2 1 0 0>;
+				reg = <0x10>;
+
+				ports {
+					#address-cells = <1>;
+					#size-cells = <0>;
+
+					port@0 {
+						reg = <0>;
+						label = "cpu";
+						ethernet = <&enet1>;
+						phy-mode = "rgmii";
+						fixed-link {
+							speed = <1000>;
+							full-duplex;
+						};
+					};
+
+					port@1 {
+						reg = <1>;
+						label = "lan5";
+					};
+
+					port@2 {
+						reg = <2>;
+						label = "lan4";
+					};
+
+					port@3 {
+						reg = <3>;
+						label = "lan3";
+					};
+
+					port@4 {
+						reg = <4>;
+						label = "lan2";
+					};
+
+					port@5 {
+						reg = <5>;
+						label = "lan1";
+					};
+				};
+			};
+
+			phy7: ethernet-phy@7 {
+				interrupts = <3 1 0 0>;
+				reg = <0x7>;
+			};
+		};
+
+		mdio@25520 {
+			status = "disabled";
+		};
+	
+		mdio@26520 {
+			status = "disabled";
+		};
+
+
+		ptp_clock@24e00 {
+			fsl,tclk-period = <5>;
+			fsl,tmr-prsc = <200>;
+			fsl,tmr-add = <0xCCCCCCCD>;
+			fsl,tmr-fiper1 = <0x3B9AC9FB>;
+			fsl,tmr-fiper2 = <0x0001869B>;
+			fsl,max-adj = <249999999>;
+		};
+
+		enet0: ethernet@24000 {
+			phy-connection-type = "rgmii-id";
+			fixed-link {
+				speed = <1000>;
+				full-duplex;
+			};
+		};
+
+		enet1: ethernet@25000 {
+			phy-connection-type = "rgmii-id";
+			fixed-link {
+				speed = <1000>;
+				full-duplex;
+			};
+		};
+
+		enet2: ethernet@26000 {
+			phy-handle = <&phy7>;
+			phy-connection-type = "rgmii-id";
+		};
+	};
+	pci2: pcie@ffe08000 {
+		ranges = <0x2000000 0x0 0xc0000000 0 0xc0000000 0x0 0x20000000
+			  0x1000000 0x0 0x00000000 0 0xffc20000 0x0 0x10000>;
+		reg = <0 0xffe08000 0 0x1000>;
+		pcie@0 {
+			ranges = <0x2000000 0x0 0xc0000000
+				  0x2000000 0x0 0xc0000000
+				  0x0 0x20000000
+
+				  0x1000000 0x0 0x0
+				  0x1000000 0x0 0x0
+				  0x0 0x10000>;
+		};
+	};
+
+	pci1: pcie@ffe09000 {
+		ranges = <0x2000000 0x0 0xa0000000 0 0xa0000000 0x0 0x20000000
+			  0x1000000 0x0 0x00000000 0 0xffc10000 0x0 0x10000>;
+		reg = <0 0xffe09000 0 0x1000>;
+		pcie@0 {
+			ranges = <0x2000000 0x0 0xa0000000
+				  0x2000000 0x0 0xa0000000
+				  0x0 0x20000000
+
+				  0x1000000 0x0 0x0
+				  0x1000000 0x0 0x0
+				  0x0 0x10000>;
+		};
+	};
+
+	pci0: pcie@ffe0a000 {
+		ranges = <0x2000000 0x0 0x80000000 0 0x80000000 0x0 0x20000000
+			  0x1000000 0x0 0x00000000 0 0xffc00000 0x0 0x10000>;
+		reg = <0 0xffe0a000 0 0x1000>;
+		pcie@0 {
+			ranges = <0x2000000 0x0 0x80000000
+				  0x2000000 0x0 0x80000000
+				  0x0 0x20000000
+
+				  0x1000000 0x0 0x0
+				  0x1000000 0x0 0x0
+				  0x0 0x10000>;
+		};
+	};
+
+};
+
+/include/ "fsl/p2020si-post.dtsi"
diff --git a/target/linux/mpc85xx/p2020/config-default b/target/linux/mpc85xx/p2020/config-default
new file mode 100644
index 0000000..6770200
--- /dev/null
+++ b/target/linux/mpc85xx/p2020/config-default
@@ -0,0 +1,101 @@
+CONFIG_ADVANCED_OPTIONS=y
+CONFIG_ARCH_CPU_PROBE_RELEASE=y
+CONFIG_ARCH_DMA_ADDR_T_64BIT=y
+CONFIG_ARCH_HAS_TICK_BROADCAST=y
+CONFIG_ARCH_PHYS_ADDR_T_64BIT=y
+CONFIG_BCH=y
+CONFIG_BOOKE_WDT=y
+CONFIG_BUILD_BIN2C=y
+CONFIG_CC_OPTIMIZE_FOR_SIZE=y
+CONFIG_CPU_IDLE=y
+CONFIG_CPU_IDLE_GOV_LADDER=y
+CONFIG_CPU_RMAP=y
+CONFIG_CRC16=y
+CONFIG_CRYPTO_DEFLATE=y
+CONFIG_CRYPTO_LZO=y
+CONFIG_CRYPTO_XZ=y
+# CONFIG_DYNAMIC_MEMSTART is not set
+CONFIG_FIXED_PHY=y
+CONFIG_FREEZER=y
+CONFIG_FSL_MPIC_TIMER_WAKEUP=y
+CONFIG_FSL_PMC=y
+CONFIG_GENERIC_CLOCKEVENTS_BROADCAST=y
+CONFIG_GENERIC_TBSYNC=y
+CONFIG_HAVE_RCU_TABLE_FREE=y
+CONFIG_HIGHMEM=y
+CONFIG_HOTPLUG_CPU=y
+# CONFIG_HUGETLBFS is not set
+CONFIG_I2C=y
+CONFIG_I2C_BOARDINFO=y
+CONFIG_I2C_CHARDEV=y
+CONFIG_I2C_MPC=y
+CONFIG_IRQ_ALL_CPUS=y
+# CONFIG_KERNEL_START_BOOL is not set
+# CONFIG_LOWMEM_CAM_NUM_BOOL is not set
+CONFIG_LOWMEM_SIZE=0x20000000
+CONFIG_LOWMEM_SIZE_BOOL=y
+CONFIG_LZO_COMPRESS=y
+CONFIG_LZO_DECOMPRESS=y
+CONFIG_MAGIC_SYSRQ=y
+CONFIG_MATH_EMULATION=y
+# CONFIG_MATH_EMULATION_FULL is not set
+CONFIG_MATH_EMULATION_HW_UNIMPLEMENTED=y
+CONFIG_MPIC_MSGR=y
+# CONFIG_MTD_CFI_INTELEXT is not set
+CONFIG_MTD_JEDECPROBE=y
+CONFIG_MTD_NAND=y
+CONFIG_MTD_NAND_BCH=y
+CONFIG_MTD_NAND_ECC=y
+CONFIG_MTD_NAND_ECC_BCH=y
+CONFIG_MTD_NAND_FSL_ELBC=y
+# CONFIG_MTD_ROOTFS_ROOT_DEV is not set
+# CONFIG_MTD_ROOTFS_SPLIT is not set
+# CONFIG_MTD_SPLIT is not set
+# CONFIG_MTD_SPLIT_SQUASHFS_ROOT is not set
+CONFIG_MTD_TESTS=m
+CONFIG_MTD_UBI=y
+CONFIG_MTD_UBI_BEB_LIMIT=20
+# CONFIG_MTD_UBI_BLOCK is not set
+# CONFIG_MTD_UBI_FASTMAP is not set
+# CONFIG_MTD_UBI_GLUEBI is not set
+CONFIG_MTD_UBI_WL_THRESHOLD=4096
+CONFIG_MUTEX_SPIN_ON_OWNER=y
+CONFIG_NET_FLOW_LIMIT=y
+CONFIG_NR_CPUS=2
+# CONFIG_PAGE_OFFSET_BOOL is not set
+CONFIG_PCI_MSI=y
+# CONFIG_PHYSICAL_START_BOOL is not set
+CONFIG_PHYS_64BIT=y
+CONFIG_PHYS_ADDR_T_64BIT=y
+CONFIG_PM=y
+# CONFIG_PM_DEBUG is not set
+CONFIG_PM_SLEEP=y
+CONFIG_PM_SLEEP_SMP=y
+CONFIG_PPC_MSI_BITMAP=y
+CONFIG_PTE_64BIT=y
+CONFIG_RCU_STALL_COMMON=y
+CONFIG_RFS_ACCEL=y
+CONFIG_RPS=y
+CONFIG_RTC_CLASS=y
+CONFIG_RTC_DRV_DS1307=y
+CONFIG_RWSEM_SPIN_ON_OWNER=y
+CONFIG_SLUB_CPU_PARTIAL=y
+CONFIG_SMP=y
+CONFIG_STOP_MACHINE=y
+CONFIG_SUSPEND=y
+CONFIG_SUSPEND_FREEZER=y
+CONFIG_SYS_SUPPORTS_HUGETLBFS=y
+# CONFIG_TASK_SIZE_BOOL is not set
+CONFIG_TREE_RCU=y
+CONFIG_UBIFS_FS=y
+CONFIG_UBIFS_FS_ADVANCED_COMPR=y
+CONFIG_UBIFS_FS_LZO=y
+CONFIG_UBIFS_FS_XZ=y
+CONFIG_UBIFS_FS_ZLIB=y
+CONFIG_VGA_CONSOLE=n
+CONFIG_WATCHDOG_CORE=y
+CONFIG_XPS=y
+CONFIG_ZLIB_DEFLATE=y
+CONFIG_ZLIB_INFLATE=y
+CONFIG_FB_FSL_DIU=n
+CONFIG_CPU_HOTPLUG_STATE_CONTROL=n
diff --git a/target/linux/mpc85xx/p2020/profiles/turris.mk b/target/linux/mpc85xx/p2020/profiles/turris.mk
new file mode 100644
index 0000000..6c1d542
--- /dev/null
+++ b/target/linux/mpc85xx/p2020/profiles/turris.mk
@@ -0,0 +1,29 @@
+JFFS2_BLOCKSIZE := 128k
+FEATURES += rtc nand ubifs -squashfs
+NAND_BLOCKSIZE := 2048:128k
+TURRISNAND_DTS:="turris-bch"
+TURRISNAND_UBIFS_OPTS:="-m 2048 -e 124KiB -c 2000 -F"
+TURRISNAND_UBI_OPTS:="-m 2048 -p 128KiB -s 2048"
+KERNEL_PATCHVER:=4.14
+KERNELNAME:=zImage turris.dtb
+
+define Profile/TURRIS
+	NAME:=Turris 1.X
+	PACKAGES:=\
+		kmod-usb-core kmod-usb2 kmod-usb2-fsl \
+		kmod-ath9k kmod-hostapd kmod-usb3 wpad \
+		kmod-usb-storage uboot-turris \
+		block-mount kmod-hwmon-core kmod-hwmon-lm90 \
+		nuci updater unbound oneshot logrotate \
+		mtd-utils mtd-utils-nandwrite start-indicator \
+		mtd-utils-flash-erase mtd-utils-flash-eraseall mtd-utils-flash-info \
+		luci luci-i18n-czech cert-backup foris update_mac wget \
+		userspace_time_sync openssh-moduli watchdog_adjust \
+		ucollect-config rainbow turris-version \
+		spidev-test i2c-tools -dropbear
+endef
+
+define Profile/TURRIS/Description
+	Package set optimized for the Turris 1.X.
+endef
+$(eval $(call Profile,TURRIS))
diff --git a/target/linux/mpc85xx/p2020/target.mk b/target/linux/mpc85xx/p2020/target.mk
new file mode 100644
index 0000000..aa39263
--- /dev/null
+++ b/target/linux/mpc85xx/p2020/target.mk
@@ -0,0 +1,6 @@
+BOARDNAME:=P2020
+FEATURES += ramdisk
+
+define Target/Description
+	Build firmware images for Freescale P2020 based boards.
+endef
diff --git a/target/linux/mpc85xx/patches-4.14/230-fsl_elbc_nand_add_ecc_mode_selection.patch b/target/linux/mpc85xx/patches-4.14/230-fsl_elbc_nand_add_ecc_mode_selection.patch
new file mode 100644
index 0000000..d661626
--- /dev/null
+++ b/target/linux/mpc85xx/patches-4.14/230-fsl_elbc_nand_add_ecc_mode_selection.patch
@@ -0,0 +1,227 @@
+Index: a/drivers/mtd/nand/fsl_elbc_nand.c
+===================================================================
+--- a/drivers/mtd/nand/fsl_elbc_nand.c
++++ b/drivers/mtd/nand/fsl_elbc_nand.c
+@@ -355,6 +355,14 @@ static void fsl_elbc_cmdfunc(struct mtd_
+ 		fsl_elbc_run_command(mtd);
+ 		return;
+ 
++	case NAND_CMD_RNDOUT:
++		dev_vdbg(priv->dev,
++			 "fsl_elbc_cmdfunc: NAND_CMD_RNDOUT, column: 0x%x.\n",
++			 column);
++
++		elbc_fcm_ctrl->index = column;
++		return;
++
+ 	/* READOOB reads only the OOB because no ECC is performed. */
+ 	case NAND_CMD_READOOB:
+ 		dev_vdbg(priv->dev,
+@@ -637,75 +645,6 @@ static int fsl_elbc_wait(struct mtd_info
+ 	return (elbc_fcm_ctrl->mdr & 0xff) | NAND_STATUS_WP;
+ }
+ 
+-static int fsl_elbc_chip_init_tail(struct mtd_info *mtd)
+-{
+-	struct nand_chip *chip = mtd_to_nand(mtd);
+-	struct fsl_elbc_mtd *priv = nand_get_controller_data(chip);
+-	struct fsl_lbc_ctrl *ctrl = priv->ctrl;
+-	struct fsl_lbc_regs __iomem *lbc = ctrl->regs;
+-	unsigned int al;
+-
+-	/* calculate FMR Address Length field */
+-	al = 0;
+-	if (chip->pagemask & 0xffff0000)
+-		al++;
+-	if (chip->pagemask & 0xff000000)
+-		al++;
+-
+-	priv->fmr |= al << FMR_AL_SHIFT;
+-
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->numchips = %d\n",
+-	        chip->numchips);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->chipsize = %lld\n",
+-	        chip->chipsize);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->pagemask = %8x\n",
+-	        chip->pagemask);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->chip_delay = %d\n",
+-	        chip->chip_delay);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->badblockpos = %d\n",
+-	        chip->badblockpos);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->chip_shift = %d\n",
+-	        chip->chip_shift);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->page_shift = %d\n",
+-	        chip->page_shift);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->phys_erase_shift = %d\n",
+-	        chip->phys_erase_shift);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->ecc.mode = %d\n",
+-	        chip->ecc.mode);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->ecc.steps = %d\n",
+-	        chip->ecc.steps);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->ecc.bytes = %d\n",
+-	        chip->ecc.bytes);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->ecc.total = %d\n",
+-	        chip->ecc.total);
+-	dev_dbg(priv->dev, "fsl_elbc_init: mtd->ooblayout = %p\n",
+-		mtd->ooblayout);
+-	dev_dbg(priv->dev, "fsl_elbc_init: mtd->flags = %08x\n", mtd->flags);
+-	dev_dbg(priv->dev, "fsl_elbc_init: mtd->size = %lld\n", mtd->size);
+-	dev_dbg(priv->dev, "fsl_elbc_init: mtd->erasesize = %d\n",
+-	        mtd->erasesize);
+-	dev_dbg(priv->dev, "fsl_elbc_init: mtd->writesize = %d\n",
+-	        mtd->writesize);
+-	dev_dbg(priv->dev, "fsl_elbc_init: mtd->oobsize = %d\n",
+-	        mtd->oobsize);
+-
+-	/* adjust Option Register and ECC to match Flash page size */
+-	if (mtd->writesize == 512) {
+-		priv->page_size = 0;
+-		clrbits32(&lbc->bank[priv->bank].or, OR_FCM_PGS);
+-	} else if (mtd->writesize == 2048) {
+-		priv->page_size = 1;
+-		setbits32(&lbc->bank[priv->bank].or, OR_FCM_PGS);
+-	} else {
+-		dev_err(priv->dev,
+-		        "fsl_elbc_init: page size %d is not supported\n",
+-		        mtd->writesize);
+-		return -1;
+-	}
+-
+-	return 0;
+-}
+-
+ static int fsl_elbc_read_page(struct mtd_info *mtd, struct nand_chip *chip,
+ 			      uint8_t *buf, int oob_required, int page)
+ {
+@@ -748,6 +687,32 @@ static int fsl_elbc_write_subpage(struct
+ 	return 0;
+ }
+ 
++static int fsl_elbc_ecc_init(struct fsl_elbc_mtd *priv)
++{
++	struct nand_chip *chip = &priv->chip;
++
++	switch (chip->ecc.mode) {
++	case NAND_ECC_SOFT:
++		break;
++	case NAND_ECC_HW:
++		chip->ecc.read_page = fsl_elbc_read_page;
++		chip->ecc.write_page = fsl_elbc_write_page;
++		chip->ecc.write_subpage = fsl_elbc_write_subpage;
++		/* put in small page settings and adjust later if needed */
++		/* chip->ecc.layout = (priv->fmr & FMR_ECCM) ?
++				&fsl_elbc_oob_sp_eccm1 : &fsl_elbc_oob_sp_eccm0; */
++		chip->ecc.size = 512;
++		chip->ecc.bytes = 3;
++		chip->ecc.strength = 1;
++		break;
++	default:
++		return -EINVAL;
++	}
++
++	return 0;
++}
++
++
+ static int fsl_elbc_chip_init(struct fsl_elbc_mtd *priv)
+ {
+ 	struct fsl_lbc_ctrl *ctrl = priv->ctrl;
+@@ -755,6 +721,8 @@ static int fsl_elbc_chip_init(struct fsl
+ 	struct fsl_elbc_fcm_ctrl *elbc_fcm_ctrl = ctrl->nand;
+ 	struct nand_chip *chip = &priv->chip;
+ 	struct mtd_info *mtd = nand_to_mtd(chip);
++	int ret;
++	unsigned int al;
+ 
+ 	dev_dbg(priv->dev, "eLBC Set Information for bank %d\n", priv->bank);
+ 
+@@ -787,24 +755,62 @@ static int fsl_elbc_chip_init(struct fsl
+ 	chip->controller = &elbc_fcm_ctrl->controller;
+ 	nand_set_controller_data(chip, priv);
+ 
+-	chip->ecc.read_page = fsl_elbc_read_page;
+-	chip->ecc.write_page = fsl_elbc_write_page;
+-	chip->ecc.write_subpage = fsl_elbc_write_subpage;
+-
+ 	/* If CS Base Register selects full hardware ECC then use it */
+ 	if ((in_be32(&lbc->bank[priv->bank].br) & BR_DECC) ==
+ 	    BR_DECC_CHK_GEN) {
+ 		chip->ecc.mode = NAND_ECC_HW;
+-		mtd_set_ooblayout(mtd, &fsl_elbc_ooblayout_ops);
+-		chip->ecc.size = 512;
+-		chip->ecc.bytes = 3;
+-		chip->ecc.strength = 1;
+ 	} else {
+ 		/* otherwise fall back to default software ECC */
+ 		chip->ecc.mode = NAND_ECC_SOFT;
+ 		chip->ecc.algo = NAND_ECC_HAMMING;
+ 	}
+ 
++	ret = nand_scan_ident(mtd, 1, NULL);
++	if (ret)
++		return ret;
++
++	ret = fsl_elbc_ecc_init(priv);
++	if (ret) {
++		dev_err(priv->dev, "ECC init failed: %d\n", ret);
++		return ret;
++	}
++
++	/* calculate FMR Address Length field */
++	al = 0;
++	if (chip->pagemask & 0xffff0000)
++		al++;
++	if (chip->pagemask & 0xff000000)
++		al++;
++
++	priv->fmr |= al << FMR_AL_SHIFT;
++
++	/* adjust Option Register and ECC to match Flash page size */
++	if (mtd->writesize == 512) {
++		priv->page_size = 0;
++		clrbits32(&lbc->bank[priv->bank].or, OR_FCM_PGS);
++	} else if (mtd->writesize == 2048) {
++		priv->page_size = 1;
++		setbits32(&lbc->bank[priv->bank].or, OR_FCM_PGS);
++		/* adjust ecc setup if needed */
++		if (((in_be32(&lbc->bank[priv->bank].br) & BR_DECC) ==
++		    BR_DECC_CHK_GEN) && (chip->ecc.mode == NAND_ECC_HW)) {
++			chip->ecc.size = 512;
++		/*	chip->ecc.layout = (priv->fmr & FMR_ECCM) ?
++			                   &fsl_elbc_oob_lp_eccm1 :
++			                   &fsl_elbc_oob_lp_eccm0; */
++		}
++	} else {
++		dev_err(priv->dev, "page size %d is not supported\n",
++		        mtd->writesize);
++		return -1;
++ 	}
++ 
++	ret = nand_scan_tail(mtd);
++	if (ret) {
++		dev_err(priv->dev, "nand_scan_tail failed: %d\n", ret);
++		return ret;
++	}
++
+ 	return 0;
+ }
+ 
+@@ -912,18 +940,6 @@ static int fsl_elbc_nand_probe(struct pl
+ 	if (ret)
+ 		goto err;
+ 
+-	ret = nand_scan_ident(mtd, 1, NULL);
+-	if (ret)
+-		goto err;
+-
+-	ret = fsl_elbc_chip_init_tail(mtd);
+-	if (ret)
+-		goto err;
+-
+-	ret = nand_scan_tail(mtd);
+-	if (ret)
+-		goto err;
+-
+ 	/* First look for RedBoot table or partitions on the command
+ 	 * line, these take precedence over device tree information */
+ 	mtd_device_parse_register(mtd, part_probe_types, NULL,
diff --git a/target/linux/mpc85xx/patches-4.14/400-net-dsa-qca8k-extend-slave-bus-implementations.patch b/target/linux/mpc85xx/patches-4.14/400-net-dsa-qca8k-extend-slave-bus-implementations.patch
new file mode 100644
index 0000000..9a24bee
--- /dev/null
+++ b/target/linux/mpc85xx/patches-4.14/400-net-dsa-qca8k-extend-slave-bus-implementations.patch
@@ -0,0 +1,243 @@
+From c13c700885cf9cdfe52a67124168671cbb843f2c Mon Sep 17 00:00:00 2001
+From: =?UTF-8?q?Marek=20Beh=C3=BAn?= <marek.behun@nic.cz>
+Date: Wed, 3 Jul 2019 10:57:02 +0200
+Subject: [PATCH] net: dsa: qca8k: extend slave-bus implementations
+MIME-Version: 1.0
+Content-Type: text/plain; charset=UTF-8
+Content-Transfer-Encoding: 8bit
+
+commit db460c54b67fc2cbe6dcef88b7bf3cba8e07f80e upstream
+
+This patch implements accessors for the QCA8337 MDIO access
+through the MDIO_MASTER register, which makes it possible to
+access the PHYs on slave-bus through the switch. In cases
+where the switch ports are already mapped via external
+"phy-phandles", the internal mdio-bus is disabled in order to
+prevent a duplicated discovery and enumeration of the same
+PHYs. Don't use mixed external and internal mdio-bus
+configurations, as this is not supported by the hardware.
+
+Signed-off-by: Christian Lamparter <chunkeey@gmail.com>
+Signed-off-by: David S. Miller <davem@davemloft.net>
+Signed-off-by: Marek Behún <marek.behun@nic.cz>
+---
+ drivers/net/dsa/qca8k.c | 157 +++++++++++++++++++++++++++++++++++++++-
+ drivers/net/dsa/qca8k.h |  13 ++++
+ 2 files changed, 169 insertions(+), 1 deletion(-)
+
+diff --git a/drivers/net/dsa/qca8k.c b/drivers/net/dsa/qca8k.c
+index c3c9d7e33bd6..d5f40d3c75e3 100644
+--- a/drivers/net/dsa/qca8k.c
++++ b/drivers/net/dsa/qca8k.c
+@@ -485,6 +485,156 @@ qca8k_port_set_status(struct qca8k_priv *priv, int port, int enable)
+ 		qca8k_reg_clear(priv, QCA8K_REG_PORT_STATUS(port), mask);
+ }
+ 
++static u32
++qca8k_port_to_phy(int port)
++{
++	/* From Andrew Lunn:
++	 * Port 0 has no internal phy.
++	 * Port 1 has an internal PHY at MDIO address 0.
++	 * Port 2 has an internal PHY at MDIO address 1.
++	 * ...
++	 * Port 5 has an internal PHY at MDIO address 4.
++	 * Port 6 has no internal PHY.
++	 */
++
++	return port - 1;
++}
++
++static int
++qca8k_mdio_write(struct qca8k_priv *priv, int port, u32 regnum, u16 data)
++{
++	u32 phy, val;
++
++	if (regnum >= QCA8K_MDIO_MASTER_MAX_REG)
++		return -EINVAL;
++
++	/* callee is responsible for not passing bad ports,
++	 * but we still would like to make spills impossible.
++	 */
++	phy = qca8k_port_to_phy(port) % PHY_MAX_ADDR;
++	val = QCA8K_MDIO_MASTER_BUSY | QCA8K_MDIO_MASTER_EN |
++	      QCA8K_MDIO_MASTER_WRITE | QCA8K_MDIO_MASTER_PHY_ADDR(phy) |
++	      QCA8K_MDIO_MASTER_REG_ADDR(regnum) |
++	      QCA8K_MDIO_MASTER_DATA(data);
++
++	qca8k_write(priv, QCA8K_MDIO_MASTER_CTRL, val);
++
++	return qca8k_busy_wait(priv, QCA8K_MDIO_MASTER_CTRL,
++		QCA8K_MDIO_MASTER_BUSY);
++}
++
++static int
++qca8k_mdio_read(struct qca8k_priv *priv, int port, u32 regnum)
++{
++	u32 phy, val;
++
++	if (regnum >= QCA8K_MDIO_MASTER_MAX_REG)
++		return -EINVAL;
++
++	/* callee is responsible for not passing bad ports,
++	 * but we still would like to make spills impossible.
++	 */
++	phy = qca8k_port_to_phy(port) % PHY_MAX_ADDR;
++	val = QCA8K_MDIO_MASTER_BUSY | QCA8K_MDIO_MASTER_EN |
++	      QCA8K_MDIO_MASTER_READ | QCA8K_MDIO_MASTER_PHY_ADDR(phy) |
++	      QCA8K_MDIO_MASTER_REG_ADDR(regnum);
++
++	qca8k_write(priv, QCA8K_MDIO_MASTER_CTRL, val);
++
++	if (qca8k_busy_wait(priv, QCA8K_MDIO_MASTER_CTRL,
++			    QCA8K_MDIO_MASTER_BUSY))
++		return -ETIMEDOUT;
++
++	val = (qca8k_read(priv, QCA8K_MDIO_MASTER_CTRL) &
++		QCA8K_MDIO_MASTER_DATA_MASK);
++
++	return val;
++}
++
++static int
++qca8k_phy_write(struct dsa_switch *ds, int port, int regnum, u16 data)
++{
++	struct qca8k_priv *priv = ds->priv;
++
++	return qca8k_mdio_write(priv, port, regnum, data);
++}
++
++static int
++qca8k_phy_read(struct dsa_switch *ds, int port, int regnum)
++{
++	struct qca8k_priv *priv = ds->priv;
++	int ret;
++
++	ret = qca8k_mdio_read(priv, port, regnum);
++
++	if (ret < 0)
++		return 0xffff;
++
++	return ret;
++}
++
++static int
++qca8k_setup_mdio_bus(struct qca8k_priv *priv)
++{
++	u32 internal_mdio_mask = 0, external_mdio_mask = 0, reg;
++	struct device_node *ports, *port;
++	int err;
++
++	ports = of_get_child_by_name(priv->dev->of_node, "ports");
++	if (!ports)
++		return -EINVAL;
++
++	for_each_available_child_of_node(ports, port) {
++		err = of_property_read_u32(port, "reg", &reg);
++		if (err)
++			return err;
++
++		if (dsa_is_cpu_port(priv->ds, reg) ||
++		    dsa_is_dsa_port(priv->ds, reg))
++			continue;
++
++		if (of_property_read_bool(port, "phy-handle"))
++			external_mdio_mask |= BIT(reg);
++		else
++			internal_mdio_mask |= BIT(reg);
++	}
++
++	if (!external_mdio_mask && !internal_mdio_mask) {
++		dev_err(priv->dev, "no PHYs are defined.\n");
++		return -EINVAL;
++	}
++
++	/* The QCA8K_MDIO_MASTER_EN Bit, which grants access to PHYs through
++	 * the MDIO_MASTER register also _disconnects_ the external MDC
++	 * passthrough to the internal PHYs. It's not possible to use both
++	 * configurations at the same time!
++	 *
++	 * Because this came up during the review process:
++	 * If the external mdio-bus driver is capable magically disabling
++	 * the QCA8K_MDIO_MASTER_EN and mutex/spin-locking out the qca8k's
++	 * accessors for the time being, it would be possible to pull this
++	 * off.
++	 */
++	if (!!external_mdio_mask && !!internal_mdio_mask) {
++		dev_err(priv->dev, "either internal or external mdio bus configuration is supported.\n");
++		return -EINVAL;
++	}
++
++	if (external_mdio_mask) {
++		/* Make sure to disable the internal mdio bus in cases
++		 * a dt-overlay and driver reload changed the configuration
++		 */
++
++		qca8k_reg_clear(priv, QCA8K_MDIO_MASTER_CTRL,
++				QCA8K_MDIO_MASTER_EN);
++		return 0;
++	}
++
++	priv->ops.phy_read = qca8k_phy_read;
++	priv->ops.phy_write = qca8k_phy_write;
++	return 0;
++}
++
+ static int
+ qca8k_setup(struct dsa_switch *ds)
+ {
+@@ -506,6 +656,10 @@ qca8k_setup(struct dsa_switch *ds)
+ 	if (IS_ERR(priv->regmap))
+ 		pr_warn("regmap initialization failed");
+ 
++	ret = qca8k_setup_mdio_bus(priv);
++	if (ret)
++		return ret;
++
+ 	/* Initialize CPU port pad mode (xMII type, delays...) */
+ 	phy_mode = of_get_phy_mode(ds->dst->cpu_dp->dn);
+ 	if (phy_mode < 0) {
+@@ -905,7 +1059,8 @@ qca8k_sw_probe(struct mdio_device *mdiodev)
+ 		return -ENOMEM;
+ 
+ 	priv->ds->priv = priv;
+-	priv->ds->ops = &qca8k_switch_ops;
++	priv->ops = qca8k_switch_ops;
++	priv->ds->ops = &priv->ops;
+ 	mutex_init(&priv->reg_mutex);
+ 	dev_set_drvdata(&mdiodev->dev, priv);
+ 
+diff --git a/drivers/net/dsa/qca8k.h b/drivers/net/dsa/qca8k.h
+index 613fe5c50236..38d06661f0a8 100644
+--- a/drivers/net/dsa/qca8k.h
++++ b/drivers/net/dsa/qca8k.h
+@@ -48,6 +48,18 @@
+ #define   QCA8K_MIB_FLUSH				BIT(24)
+ #define   QCA8K_MIB_CPU_KEEP				BIT(20)
+ #define   QCA8K_MIB_BUSY				BIT(17)
++#define QCA8K_MDIO_MASTER_CTRL				0x3c
++#define   QCA8K_MDIO_MASTER_BUSY			BIT(31)
++#define   QCA8K_MDIO_MASTER_EN				BIT(30)
++#define   QCA8K_MDIO_MASTER_READ			BIT(27)
++#define   QCA8K_MDIO_MASTER_WRITE			0
++#define   QCA8K_MDIO_MASTER_SUP_PRE			BIT(26)
++#define   QCA8K_MDIO_MASTER_PHY_ADDR(x)			((x) << 21)
++#define   QCA8K_MDIO_MASTER_REG_ADDR(x)			((x) << 16)
++#define   QCA8K_MDIO_MASTER_DATA(x)			(x)
++#define   QCA8K_MDIO_MASTER_DATA_MASK			GENMASK(15, 0)
++#define   QCA8K_MDIO_MASTER_MAX_PORTS			5
++#define   QCA8K_MDIO_MASTER_MAX_REG			32
+ #define QCA8K_GOL_MAC_ADDR0				0x60
+ #define QCA8K_GOL_MAC_ADDR1				0x64
+ #define QCA8K_REG_PORT_STATUS(_i)			(0x07c + (_i) * 4)
+@@ -168,6 +180,7 @@ struct qca8k_priv {
+ 	struct dsa_switch *ds;
+ 	struct mutex reg_mutex;
+ 	struct device *dev;
++	struct dsa_switch_ops ops;
+ };
+ 
+ struct qca8k_mib_desc {
+-- 
+2.21.0
+
-- 
2.21.0

