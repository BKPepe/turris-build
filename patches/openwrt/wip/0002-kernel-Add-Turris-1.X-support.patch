From d98698903e85a81962469dbef7c4d4998c9ec2fe Mon Sep 17 00:00:00 2001
From: Michal Hrusecky <Michal@Hrusecky.net>
Date: Wed, 27 Dec 2017 17:19:45 +0100
Subject: [PATCH] kernel: Add Turris 1.X support

Tested on Turris 1.1 and works, but might break other mpc boards, so might need
some polishing.

Signed-off-by: Michal Hrusecky <Michal@Hrusecky.net>
---
 .../mpc85xx/base-files/etc/board.d/02_network |   6 +
 .../arch/powerpc/boot/dts/turris.dts          | 252 ++++++++++++++++++
 target/linux/mpc85xx/p2020/profiles/turris.mk |  29 ++
 ...fsl_elbc_nand_add_ecc_mode_selection.patch | 227 ++++++++++++++++
 7 files changed, 620 insertions(+), 1 deletion(-)
 create mode 100644 target/linux/mpc85xx/files-4.14/arch/powerpc/boot/dts/turris.dts
 create mode 100644 target/linux/mpc85xx/p2020/profiles/turris.mk
 create mode 100644 target/linux/mpc85xx/patches-4.14/230-fsl_elbc_nand_add_ecc_mode_selection.patch

diff --git a/target/linux/mpc85xx/base-files/etc/board.d/02_network b/target/linux/mpc85xx/base-files/etc/board.d/02_network
index 19f01a6..7679728 100755
--- a/target/linux/mpc85xx/base-files/etc/board.d/02_network
+++ b/target/linux/mpc85xx/base-files/etc/board.d/02_network
@@ -18,6 +18,12 @@ tplink,tl-wdr4900-v1)
 		"0@eth0" "2:lan:1" "3:lan:2" "4:lan:3" "5:lan:4" "1:wan"
 	ucidef_set_interface_macaddr "wan" "$(mtd_get_mac_binary config 332)"
 	;;
+fsl,P2020RDB)
+	ucidef_set_interface_lan "eth0 eth1"
+	ucidef_set_interface_wan "eth2"
+	ucidef_add_switch "switch0" \
+		"0u@eth1" "1:lan1" "2:lan1" "3:lan1" "4:lan1" "5:lan2" "6u@eth0"
+	;;
 *)
 	ucidef_set_interfaces_lan_wan "eth0" "eth1"
 	;;
diff --git a/target/linux/mpc85xx/files-4.14/arch/powerpc/boot/dts/turris.dts b/target/linux/mpc85xx/files-4.14/arch/powerpc/boot/dts/turris.dts
new file mode 100644
index 0000000..5c5555f
--- /dev/null
+++ b/target/linux/mpc85xx/files-4.14/arch/powerpc/boot/dts/turris.dts
@@ -0,0 +1,252 @@
+/*
+ * Turris RDB Device Tree Source
+ *
+ * Copyright 2013 CZ.NIC z.s.p.o. (http://www.nic.cz/)
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+/include/ "fsl/p2020si-pre.dtsi"
+
+/ {
+	model = "Turris";
+	compatible = "fsl,P2020RDB";
+
+	aliases {
+		ethernet0 = &enet0;
+		ethernet1 = &enet1;
+		ethernet2 = &enet2;
+		serial0 = &serial0;
+		serial1 = &serial1;
+		pci0 = &pci0;
+		pci1 = &pci1;
+		pci2 = &pci2;
+                spi0 = &spi0;
+	};
+
+	memory {
+		device_type = "memory";
+	};
+
+	lbc: localbus@ffe05000 {
+		reg = <0 0xffe05000 0 0x1000>;
+
+		/* NOR and NAND Flashes */
+		ranges = <0x0 0x0 0x0 0xef000000 0x01000000
+			  0x1 0x0 0x0 0xff800000 0x00040000
+			  0x2 0x0 0x0 0xffb00000 0x00020000>;
+		
+		nor@0,0 {
+                        #address-cells = <1>;
+                        #size-cells = <1>;
+                        compatible = "cfi-flash";
+                        reg = <0x0 0x0 0x1000000>;
+                        bank-width = <2>;
+                        device-width = <1>;
+
+                        partition@0 {
+                                /* 128KB for DTB Image */
+                                reg = <0x0 0x00020000>;
+                                label = "NOR (RO) DTB Image";
+                        };
+
+                        partition@20000 {
+                                /* 1.7 MB for Linux Kernel Image */
+                                reg = <0x00020000 0x1A0000>;
+                                label = "NOR (RO) Linux Kernel Image";
+                        };
+
+                        partition@1C0000 {
+                                /* 1.5 MB for JFFS2 based Root file System */
+                                reg = <0x001C0000 0x180000>;
+                                label = "NOR (RO) JFFS2 Root File System";
+                        };
+
+                        partition@340000 {
+                                /* for nand fw backup */
+                                reg = <0x00340000 0xb00000>;
+                                label = "NOR (RO) NAND FW backup";
+                        };
+
+                        partition@E40000 {
+                                /* 128KB for Certificates backup */
+                                reg = <0xE40000 0x000C0000>;
+                                label = "NOR (RW) Cert backup";
+                        };
+
+                        partition@f00000 {
+                                /* This location must not be altered  */
+                                /* 512KB for u-boot Bootloader Image */
+                                /* 512KB for u-boot Environment Variables */
+                                reg = <0x00f00000 0x00100000>;
+                                label = "NOR (RO) U-Boot Image";
+                        };
+                };
+	
+		nand@1,0 {
+			#address-cells = <1>;
+			#size-cells = <1>;
+			compatible = "fsl,p2020-fcm-nand",
+				     "fsl,elbc-fcm-nand";
+			reg = <0x1 0x0 0x00040000>;
+			nand-ecc-mode = "soft_bch";
+			nand-ecc-step-size = <512>;
+			nand-ecc-strength = <4>; 
+
+			partition@00 {
+				reg = <0x00000000 0x10000000>;
+				label = "rootfs-ubifs";
+			};
+
+		};
+
+	};
+
+	soc: soc@ffe00000 {
+		ranges = <0x0 0x0 0xffe00000 0x100000>;
+
+		i2c@3000 {
+			rtc@6f {
+				compatible = "mcp7940x";
+				reg = <0x6f>;
+			};
+			lm90@4c {
+				compatible = "sa56004";
+				reg = <0x4c>;
+			};
+		};
+
+                spi0: spi@7000 {
+                        spidev@0 {
+                                compatible = "spidev";
+                                spi-max-frequency = <40000000>;
+                                reg = <0>;
+                        };
+                        spidev@1 {
+                                compatible = "spidev";
+                                spi-max-frequency = <40000000>;
+                                reg = <1>;
+                        };
+                        spidev@2 {
+                                compatible = "spidev";
+                                spi-max-frequency = <40000000>;
+                                reg = <2>;
+                        };
+                        spidev@3 {
+                                compatible = "spidev";
+                                spi-max-frequency = <40000000>;
+                                reg = <3>;
+                        };
+                };
+
+		usb@22000 {
+			phy_type = "ulpi";
+			dr_mode = "host";
+		};
+
+	        mdio@24520 {
+        	        phy0: ethernet-phy@0 {
+                	        interrupts = <2 1 0 0>;
+                        	reg = <0x0>;
+                              qca,ar8327-initvals = <
+                                        0x00004 0x07600000 /* PAD0_MODE - eth1 */
+                                        0x00008 0x01000000 /* PAD5_MODE */
+                                        0x0000c 0x07600000 /* PAD6_MODE - eth0 */
+                                        0x00010 0x40000000 /* POWER_ON_STRIP */
+                                        0x00050 0xcc35cc35 /* LED_CTRL0 */
+                                        0x00054 0xca35ca35 /* LED_CTRL1 */
+                                        0x00058 0xc935c935 /* LED_CTRL2 */
+                                        0x0005c 0x03ffff00 /* LED_CTRL3 */
+                                        0x0007c 0x0000007e /* PORT0_STATUS */
+                                        0x00094 0x0000007e /* PORT6 STATUS */
+                                >;
+	                };
+                        phy7: ethernet-phy@7 {
+                                interrupts = <3 1 0 0>;
+                                reg = <0x7>;
+                        };
+	        };
+
+        	mdio@25520 {
+                        status = "disabled";
+	        };
+	
+        	mdio@26520 {
+                        status = "disabled";
+        	};
+
+
+		ptp_clock@24e00 {
+			fsl,tclk-period = <5>;
+			fsl,tmr-prsc = <200>;
+			fsl,tmr-add = <0xCCCCCCCD>;
+			fsl,tmr-fiper1 = <0x3B9AC9FB>;
+			fsl,tmr-fiper2 = <0x0001869B>;
+			fsl,max-adj = <249999999>;
+		};
+
+	        enet0: ethernet@24000 {
+                        phy-handle = <&phy0>;
+	                phy-connection-type = "rgmii-id";
+        	};
+
+	        enet1: ethernet@25000 {
+	                fixed-link = <6 1 1000 1 0>;
+        	};
+
+	        enet2: ethernet@26000 {
+                	phy-handle = <&phy7>;
+	                phy-connection-type = "rgmii-id";
+        	};
+	};
+        pci2: pcie@ffe08000 {
+                ranges = <0x2000000 0x0 0xc0000000 0 0xc0000000 0x0 0x20000000
+                          0x1000000 0x0 0x00000000 0 0xffc20000 0x0 0x10000>;
+                reg = <0 0xffe08000 0 0x1000>;
+                pcie@0 {
+                        ranges = <0x2000000 0x0 0xc0000000
+                                  0x2000000 0x0 0xc0000000
+                                  0x0 0x20000000
+
+                                  0x1000000 0x0 0x0
+                                  0x1000000 0x0 0x0
+                                  0x0 0x10000>;
+                };
+        };
+
+        pci1: pcie@ffe09000 {
+                ranges = <0x2000000 0x0 0xa0000000 0 0xa0000000 0x0 0x20000000
+                          0x1000000 0x0 0x00000000 0 0xffc10000 0x0 0x10000>;
+                reg = <0 0xffe09000 0 0x1000>;
+                pcie@0 {
+                        ranges = <0x2000000 0x0 0xa0000000
+                                  0x2000000 0x0 0xa0000000
+                                  0x0 0x20000000
+
+                                  0x1000000 0x0 0x0
+                                  0x1000000 0x0 0x0
+                                  0x0 0x10000>;
+                };
+        };
+
+        pci0: pcie@ffe0a000 {
+                ranges = <0x2000000 0x0 0x80000000 0 0x80000000 0x0 0x20000000
+                          0x1000000 0x0 0x00000000 0 0xffc00000 0x0 0x10000>;
+                reg = <0 0xffe0a000 0 0x1000>;
+                pcie@0 {
+                        ranges = <0x2000000 0x0 0x80000000
+                                  0x2000000 0x0 0x80000000
+                                  0x0 0x20000000
+
+                                  0x1000000 0x0 0x0
+                                  0x1000000 0x0 0x0
+                                  0x0 0x10000>;
+                };
+        };
+
+};
+
+/include/ "fsl/p2020si-post.dtsi"
diff --git a/target/linux/mpc85xx/p2020/profiles/turris.mk b/target/linux/mpc85xx/p2020/profiles/turris.mk
new file mode 100644
index 0000000..6c1d542
--- /dev/null
+++ b/target/linux/mpc85xx/p2020/profiles/turris.mk
@@ -0,0 +1,29 @@
+JFFS2_BLOCKSIZE := 128k
+FEATURES += rtc nand ubifs -squashfs
+NAND_BLOCKSIZE := 2048:128k
+TURRISNAND_DTS:="turris-bch"
+TURRISNAND_UBIFS_OPTS:="-m 2048 -e 124KiB -c 2000 -F"
+TURRISNAND_UBI_OPTS:="-m 2048 -p 128KiB -s 2048"
+KERNEL_PATCHVER:=4.14
+KERNELNAME:=zImage turris.dtb
+
+define Profile/TURRIS
+	NAME:=Turris 1.X
+	PACKAGES:=\
+		kmod-usb-core kmod-usb2 kmod-usb2-fsl \
+		kmod-ath9k kmod-hostapd kmod-usb3 wpad \
+		kmod-usb-storage uboot-turris \
+		block-mount kmod-hwmon-core kmod-hwmon-lm90 \
+		nuci updater unbound oneshot logrotate \
+		mtd-utils mtd-utils-nandwrite start-indicator \
+		mtd-utils-flash-erase mtd-utils-flash-eraseall mtd-utils-flash-info \
+		luci luci-i18n-czech cert-backup foris update_mac wget \
+		userspace_time_sync openssh-moduli watchdog_adjust \
+		ucollect-config rainbow turris-version \
+		spidev-test i2c-tools -dropbear
+endef
+
+define Profile/TURRIS/Description
+	Package set optimized for the Turris 1.X.
+endef
+$(eval $(call Profile,TURRIS))
diff --git a/target/linux/mpc85xx/patches-4.14/230-fsl_elbc_nand_add_ecc_mode_selection.patch b/target/linux/mpc85xx/patches-4.14/230-fsl_elbc_nand_add_ecc_mode_selection.patch
new file mode 100644
index 0000000..d661626
--- /dev/null
+++ b/target/linux/mpc85xx/patches-4.14/230-fsl_elbc_nand_add_ecc_mode_selection.patch
@@ -0,0 +1,227 @@
+Index: a/drivers/mtd/nand/fsl_elbc_nand.c
+===================================================================
+--- a/drivers/mtd/nand/fsl_elbc_nand.c
++++ b/drivers/mtd/nand/fsl_elbc_nand.c
+@@ -355,6 +355,14 @@ static void fsl_elbc_cmdfunc(struct mtd_
+ 		fsl_elbc_run_command(mtd);
+ 		return;
+ 
++	case NAND_CMD_RNDOUT:
++		dev_vdbg(priv->dev,
++			 "fsl_elbc_cmdfunc: NAND_CMD_RNDOUT, column: 0x%x.\n",
++			 column);
++
++		elbc_fcm_ctrl->index = column;
++		return;
++
+ 	/* READOOB reads only the OOB because no ECC is performed. */
+ 	case NAND_CMD_READOOB:
+ 		dev_vdbg(priv->dev,
+@@ -637,75 +645,6 @@ static int fsl_elbc_wait(struct mtd_info
+ 	return (elbc_fcm_ctrl->mdr & 0xff) | NAND_STATUS_WP;
+ }
+ 
+-static int fsl_elbc_chip_init_tail(struct mtd_info *mtd)
+-{
+-	struct nand_chip *chip = mtd_to_nand(mtd);
+-	struct fsl_elbc_mtd *priv = nand_get_controller_data(chip);
+-	struct fsl_lbc_ctrl *ctrl = priv->ctrl;
+-	struct fsl_lbc_regs __iomem *lbc = ctrl->regs;
+-	unsigned int al;
+-
+-	/* calculate FMR Address Length field */
+-	al = 0;
+-	if (chip->pagemask & 0xffff0000)
+-		al++;
+-	if (chip->pagemask & 0xff000000)
+-		al++;
+-
+-	priv->fmr |= al << FMR_AL_SHIFT;
+-
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->numchips = %d\n",
+-	        chip->numchips);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->chipsize = %lld\n",
+-	        chip->chipsize);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->pagemask = %8x\n",
+-	        chip->pagemask);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->chip_delay = %d\n",
+-	        chip->chip_delay);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->badblockpos = %d\n",
+-	        chip->badblockpos);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->chip_shift = %d\n",
+-	        chip->chip_shift);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->page_shift = %d\n",
+-	        chip->page_shift);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->phys_erase_shift = %d\n",
+-	        chip->phys_erase_shift);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->ecc.mode = %d\n",
+-	        chip->ecc.mode);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->ecc.steps = %d\n",
+-	        chip->ecc.steps);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->ecc.bytes = %d\n",
+-	        chip->ecc.bytes);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->ecc.total = %d\n",
+-	        chip->ecc.total);
+-	dev_dbg(priv->dev, "fsl_elbc_init: mtd->ooblayout = %p\n",
+-		mtd->ooblayout);
+-	dev_dbg(priv->dev, "fsl_elbc_init: mtd->flags = %08x\n", mtd->flags);
+-	dev_dbg(priv->dev, "fsl_elbc_init: mtd->size = %lld\n", mtd->size);
+-	dev_dbg(priv->dev, "fsl_elbc_init: mtd->erasesize = %d\n",
+-	        mtd->erasesize);
+-	dev_dbg(priv->dev, "fsl_elbc_init: mtd->writesize = %d\n",
+-	        mtd->writesize);
+-	dev_dbg(priv->dev, "fsl_elbc_init: mtd->oobsize = %d\n",
+-	        mtd->oobsize);
+-
+-	/* adjust Option Register and ECC to match Flash page size */
+-	if (mtd->writesize == 512) {
+-		priv->page_size = 0;
+-		clrbits32(&lbc->bank[priv->bank].or, OR_FCM_PGS);
+-	} else if (mtd->writesize == 2048) {
+-		priv->page_size = 1;
+-		setbits32(&lbc->bank[priv->bank].or, OR_FCM_PGS);
+-	} else {
+-		dev_err(priv->dev,
+-		        "fsl_elbc_init: page size %d is not supported\n",
+-		        mtd->writesize);
+-		return -1;
+-	}
+-
+-	return 0;
+-}
+-
+ static int fsl_elbc_read_page(struct mtd_info *mtd, struct nand_chip *chip,
+ 			      uint8_t *buf, int oob_required, int page)
+ {
+@@ -748,6 +687,32 @@ static int fsl_elbc_write_subpage(struct
+ 	return 0;
+ }
+ 
++static int fsl_elbc_ecc_init(struct fsl_elbc_mtd *priv)
++{
++	struct nand_chip *chip = &priv->chip;
++
++	switch (chip->ecc.mode) {
++	case NAND_ECC_SOFT:
++		break;
++	case NAND_ECC_HW:
++		chip->ecc.read_page = fsl_elbc_read_page;
++		chip->ecc.write_page = fsl_elbc_write_page;
++		chip->ecc.write_subpage = fsl_elbc_write_subpage;
++		/* put in small page settings and adjust later if needed */
++		/* chip->ecc.layout = (priv->fmr & FMR_ECCM) ?
++				&fsl_elbc_oob_sp_eccm1 : &fsl_elbc_oob_sp_eccm0; */
++		chip->ecc.size = 512;
++		chip->ecc.bytes = 3;
++		chip->ecc.strength = 1;
++		break;
++	default:
++		return -EINVAL;
++	}
++
++	return 0;
++}
++
++
+ static int fsl_elbc_chip_init(struct fsl_elbc_mtd *priv)
+ {
+ 	struct fsl_lbc_ctrl *ctrl = priv->ctrl;
+@@ -755,6 +721,8 @@ static int fsl_elbc_chip_init(struct fsl
+ 	struct fsl_elbc_fcm_ctrl *elbc_fcm_ctrl = ctrl->nand;
+ 	struct nand_chip *chip = &priv->chip;
+ 	struct mtd_info *mtd = nand_to_mtd(chip);
++	int ret;
++	unsigned int al;
+ 
+ 	dev_dbg(priv->dev, "eLBC Set Information for bank %d\n", priv->bank);
+ 
+@@ -787,24 +755,62 @@ static int fsl_elbc_chip_init(struct fsl
+ 	chip->controller = &elbc_fcm_ctrl->controller;
+ 	nand_set_controller_data(chip, priv);
+ 
+-	chip->ecc.read_page = fsl_elbc_read_page;
+-	chip->ecc.write_page = fsl_elbc_write_page;
+-	chip->ecc.write_subpage = fsl_elbc_write_subpage;
+-
+ 	/* If CS Base Register selects full hardware ECC then use it */
+ 	if ((in_be32(&lbc->bank[priv->bank].br) & BR_DECC) ==
+ 	    BR_DECC_CHK_GEN) {
+ 		chip->ecc.mode = NAND_ECC_HW;
+-		mtd_set_ooblayout(mtd, &fsl_elbc_ooblayout_ops);
+-		chip->ecc.size = 512;
+-		chip->ecc.bytes = 3;
+-		chip->ecc.strength = 1;
+ 	} else {
+ 		/* otherwise fall back to default software ECC */
+ 		chip->ecc.mode = NAND_ECC_SOFT;
+ 		chip->ecc.algo = NAND_ECC_HAMMING;
+ 	}
+ 
++	ret = nand_scan_ident(mtd, 1, NULL);
++	if (ret)
++		return ret;
++
++	ret = fsl_elbc_ecc_init(priv);
++	if (ret) {
++		dev_err(priv->dev, "ECC init failed: %d\n", ret);
++		return ret;
++	}
++
++	/* calculate FMR Address Length field */
++	al = 0;
++	if (chip->pagemask & 0xffff0000)
++		al++;
++	if (chip->pagemask & 0xff000000)
++		al++;
++
++	priv->fmr |= al << FMR_AL_SHIFT;
++
++	/* adjust Option Register and ECC to match Flash page size */
++	if (mtd->writesize == 512) {
++		priv->page_size = 0;
++		clrbits32(&lbc->bank[priv->bank].or, OR_FCM_PGS);
++	} else if (mtd->writesize == 2048) {
++		priv->page_size = 1;
++		setbits32(&lbc->bank[priv->bank].or, OR_FCM_PGS);
++		/* adjust ecc setup if needed */
++		if (((in_be32(&lbc->bank[priv->bank].br) & BR_DECC) ==
++		    BR_DECC_CHK_GEN) && (chip->ecc.mode == NAND_ECC_HW)) {
++			chip->ecc.size = 512;
++		/*	chip->ecc.layout = (priv->fmr & FMR_ECCM) ?
++			                   &fsl_elbc_oob_lp_eccm1 :
++			                   &fsl_elbc_oob_lp_eccm0; */
++		}
++	} else {
++		dev_err(priv->dev, "page size %d is not supported\n",
++		        mtd->writesize);
++		return -1;
++ 	}
++ 
++	ret = nand_scan_tail(mtd);
++	if (ret) {
++		dev_err(priv->dev, "nand_scan_tail failed: %d\n", ret);
++		return ret;
++	}
++
+ 	return 0;
+ }
+ 
+@@ -912,18 +940,6 @@ static int fsl_elbc_nand_probe(struct pl
+ 	if (ret)
+ 		goto err;
+ 
+-	ret = nand_scan_ident(mtd, 1, NULL);
+-	if (ret)
+-		goto err;
+-
+-	ret = fsl_elbc_chip_init_tail(mtd);
+-	if (ret)
+-		goto err;
+-
+-	ret = nand_scan_tail(mtd);
+-	if (ret)
+-		goto err;
+-
+ 	/* First look for RedBoot table or partitions on the command
+ 	 * line, these take precedence over device tree information */
+ 	mtd_device_parse_register(mtd, part_probe_types, NULL,
-- 
2.19.0

