From 7c466c5b0575cf89bc46b9881343cc5f1461c6b6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Beh=C3=BAn?= <marek.behun@nic.cz>
Date: Fri, 23 Sep 2022 20:26:14 +0200
Subject: [PATCH 5/9] kernel: Backport generic-phylink-validation series to
 5.15
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This backports Russell King's patch series generic-phylink-validation
from 5.16:
  34ae2c09d46a ("net: phylink: add generic validate implementation")
- already backported in OpenWrt
  02a0988b9893 ("net: mvneta: use phylink_generic_validate()")
  5038ffea0c6c ("net: mvpp2: use phylink_generic_validate()")

The original cover letter said:
  introduce generic phylink validation

  The various validate method implementations we have in phylink users
  have been quite repetitive but also prone to bugs. These patches
  introduce a generic implementation which relies solely on the
  supported_interfaces bitmap introduced during last cycle, and in the
  first patch, a bit array of MAC capabilities.

  MAC drivers are free to continue to do their own thing if they have
  special requirements - such as mvneta and mvpp2 which do not support
  1000base-X without AN enabled. Most implementations currently in the
  kernel can be converted to call phylink_generic_validate() directly
  from the phylink MAC operations structure once they fill in the
  supported_interfaces and mac_capabilities members of phylink_config.

  This series introduces the generic implementation, and converts mvneta
  and mvpp2 to use it.

Signed-off-by: Marek Beh√∫n <marek.behun@nic.cz>
---
 ...t-mvpp2-use-phylink_generic_validate.patch | 107 ++++++
 3 files changed, 532 insertions(+)
 create mode 100644 target/linux/generic/backport-5.15/780-v5.16-3-net-mvpp2-use-phylink_generic_validate.patch

diff --git a/target/linux/generic/backport-5.15/780-v5.16-3-net-mvpp2-use-phylink_generic_validate.patch b/target/linux/generic/backport-5.15/780-v5.16-3-net-mvpp2-use-phylink_generic_validate.patch
new file mode 100644
index 0000000000..a41299d778
--- /dev/null
+++ b/target/linux/generic/backport-5.15/780-v5.16-3-net-mvpp2-use-phylink_generic_validate.patch
@@ -0,0 +1,107 @@
+From 7356c6e175210a721310f75915248c3148e3147d Mon Sep 17 00:00:00 2001
+From: "Russell King (Oracle)" <rmk+kernel@armlinux.org.uk>
+Date: Mon, 15 Nov 2021 10:00:37 +0000
+Subject: [PATCH 3/3] net: mvpp2: use phylink_generic_validate()
+
+Convert mvpp2 to use phylink_generic_validate() for the bulk of its
+validate() implementation. This network adapter has a restriction
+that for 802.3z links, autonegotiation must be enabled.
+
+Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
+Signed-off-by: David S. Miller <davem@davemloft.net>
+---
+ .../net/ethernet/marvell/mvpp2/mvpp2_main.c   | 58 +++----------------
+ 1 file changed, 9 insertions(+), 49 deletions(-)
+
+diff --git a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
+index be0dcba4649b..2b8293c0c2f9 100644
+--- a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
++++ b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
+@@ -6262,9 +6262,6 @@ static void mvpp2_phylink_validate(struct phylink_config *config,
+ 				   unsigned long *supported,
+ 				   struct phylink_link_state *state)
+ {
+-	struct mvpp2_port *port = mvpp2_phylink_to_port(config);
+-	__ETHTOOL_DECLARE_LINK_MODE_MASK(mask) = { 0, };
+-
+ 	/* When in 802.3z mode, we must have AN enabled:
+ 	 * Bit 2 Field InBandAnEn In-band Auto-Negotiation enable. ...
+ 	 * When <PortType> = 1 (1000BASE-X) this field must be set to 1.
+@@ -6273,52 +6270,7 @@ static void mvpp2_phylink_validate(struct phylink_config *config,
+ 	    !phylink_test(state->advertising, Autoneg))
+ 		goto empty_set;
+ 
+-	phylink_set(mask, Autoneg);
+-	phylink_set_port_modes(mask);
+-
+-	if (port->priv->global_tx_fc) {
+-		phylink_set(mask, Pause);
+-		phylink_set(mask, Asym_Pause);
+-	}
+-
+-	switch (state->interface) {
+-	case PHY_INTERFACE_MODE_10GBASER:
+-	case PHY_INTERFACE_MODE_XAUI:
+-		if (mvpp2_port_supports_xlg(port)) {
+-			phylink_set_10g_modes(mask);
+-			phylink_set(mask, 10000baseKR_Full);
+-		}
+-		break;
+-
+-	case PHY_INTERFACE_MODE_RGMII:
+-	case PHY_INTERFACE_MODE_RGMII_ID:
+-	case PHY_INTERFACE_MODE_RGMII_RXID:
+-	case PHY_INTERFACE_MODE_RGMII_TXID:
+-	case PHY_INTERFACE_MODE_SGMII:
+-		phylink_set(mask, 10baseT_Half);
+-		phylink_set(mask, 10baseT_Full);
+-		phylink_set(mask, 100baseT_Half);
+-		phylink_set(mask, 100baseT_Full);
+-		phylink_set(mask, 1000baseT_Full);
+-		phylink_set(mask, 1000baseX_Full);
+-		break;
+-
+-	case PHY_INTERFACE_MODE_1000BASEX:
+-		phylink_set(mask, 1000baseT_Full);
+-		phylink_set(mask, 1000baseX_Full);
+-		break;
+-
+-	case PHY_INTERFACE_MODE_2500BASEX:
+-		phylink_set(mask, 2500baseT_Full);
+-		phylink_set(mask, 2500baseX_Full);
+-		break;
+-
+-	default:
+-		goto empty_set;
+-	}
+-
+-	linkmode_and(supported, supported, mask);
+-	linkmode_and(state->advertising, state->advertising, mask);
++	phylink_generic_validate(config, supported, state);
+ 	return;
+ 
+ empty_set:
+@@ -6913,12 +6865,20 @@ static int mvpp2_port_probe(struct platform_device *pdev,
+ 	if (!mvpp2_use_acpi_compat_mode(port_fwnode)) {
+ 		port->phylink_config.dev = &dev->dev;
+ 		port->phylink_config.type = PHYLINK_NETDEV;
++		port->phylink_config.mac_capabilities =
++			MAC_2500FD | MAC_1000FD | MAC_100 | MAC_10;
++
++		if (port->priv->global_tx_fc)
++			port->phylink_config.mac_capabilities |=
++				MAC_SYM_PAUSE | MAC_ASYM_PAUSE;
+ 
+ 		if (mvpp2_port_supports_xlg(port)) {
+ 			__set_bit(PHY_INTERFACE_MODE_10GBASER,
+ 				  port->phylink_config.supported_interfaces);
+ 			__set_bit(PHY_INTERFACE_MODE_XAUI,
+ 				  port->phylink_config.supported_interfaces);
++			port->phylink_config.mac_capabilities |=
++				MAC_10000FD;
+ 		}
+ 
+ 		if (mvpp2_port_supports_rgmii(port))
+-- 
+2.35.1
+
-- 
2.35.1

