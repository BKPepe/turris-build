From 6c1dc051131d753f69b273ce11fa027128c150cc Mon Sep 17 00:00:00 2001
From: Michal Hrusecky <michal.hrusecky@nic.cz>
Date: Thu, 2 Aug 2018 14:39:39 +0200
Subject: [PATCH] luajit: Try to build something on 64bits

---
 lang/luajit/Makefile                  |  2 +-
 lang/luajit/patches/64bit-build.patch | 27 +++++++++++++++++++++++++++
 2 files changed, 28 insertions(+), 1 deletion(-)
 create mode 100644 lang/luajit/patches/64bit-build.patch

diff --git a/lang/luajit/Makefile b/lang/luajit/Makefile
index e1f2a74..33a82cd 100644
--- a/lang/luajit/Makefile
+++ b/lang/luajit/Makefile
@@ -32,7 +32,7 @@ define Package/luajit/description
 endef
 
 ifeq ($(HOST_ARCH),x86_64)
-  ifeq ($(CONFIG_x86_64),)
+  ifeq ($(CONFIG_ARCH_64BIT),)
     HOST_BITS := -m32
   endif
 endif
diff --git a/lang/luajit/patches/64bit-build.patch b/lang/luajit/patches/64bit-build.patch
new file mode 100644
index 0000000..908b8f1
--- /dev/null
+++ b/lang/luajit/patches/64bit-build.patch
@@ -0,0 +1,27 @@
+Index: luajit-2017-01-17-71ff7ef/src/lj_obj.h
+===================================================================
+--- luajit-2017-01-17-71ff7ef.orig/src/lj_obj.h
++++ luajit-2017-01-17-71ff7ef/src/lj_obj.h
+@@ -16,10 +16,11 @@
+ /* -- Memory references (32 bit address space) ---------------------------- */
+ 
+ /* Memory and GC object sizes. */
+-typedef uint32_t MSize;
+ #if LJ_GC64
+ typedef uint64_t GCSize;
++typedef uint64_t MSize;
+ #else
++typedef uint32_t MSize;
+ typedef uint32_t GCSize;
+ #endif
+ 
+@@ -358,9 +359,6 @@ typedef struct GCproto {
+   uint8_t numparams;	/* Number of parameters. */
+   uint8_t framesize;	/* Fixed frame size. */
+   MSize sizebc;		/* Number of bytecode instructions. */
+-#if LJ_GC64
+-  uint32_t unused_gc64;
+-#endif
+   GCRef gclist;
+   MRef k;		/* Split constant array (points to the middle). */
+   MRef uv;		/* Upvalue list. local slot|0x8000 or parent uv idx. */
-- 
2.19.2

